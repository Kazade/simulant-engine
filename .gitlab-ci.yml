include:
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
    - if: '$CI_COMMIT_REF_NAME == "next"'
    - if: "$CI_COMMIT_TAG"

stages:
  - prepare
  - build
  - test
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp, simulant/deps

pages:
  stage: prepare
  image: fedora:33
  script:
    - dnf install -y doxygen python3 git
    - python3 tools/gendocs.py `pwd` `git describe --abbrev=4 --always --tags | cut -d - -f 1-2` `pwd`
    - mv `git describe --abbrev=4 --always --tags | cut -d - -f 1-2`/html public
  artifacts:
    paths:
      - public
  only:
    - master

prepare:linux-x64-gcc:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none # Prevent cloning
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:32\n
      RUN dnf update -y && dnf clean all\n
      RUN dnf install -y cmake make gcc-c++ python SDL2-devel openal-soft-devel zlib-devel mesa-libGL-devel SDL2 openal-soft mesa-libGL libstdc++ pulseaudio pulseaudio-utils xorg-x11-server-Xvfb xorg-x11-drv-dummy dpkg mesa-dri-drivers\n
  before_script: # Put the variable into a Dockerfile
    - echo -e $DOCKERFILE > Dockerfile
    - cat Dockerfile
  script:
    - docker pull $CI_REGISTRY_IMAGE:linux-x64-gcc || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:linux-x64-gcc -t $CI_REGISTRY_IMAGE:linux-x64-gcc .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:linux-x64-gcc
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .gitlab-ci.yml
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
      changes:
        - .gitlab-ci.yml

prepare:linux-x64-gcc11:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none # Prevent cloning
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:33\n
      RUN dnf update -y && dnf clean all\n
      RUN dnf install -y cmake make gcc-c++ python SDL2-devel openal-soft-devel zlib-devel mesa-libGL-devel SDL2 openal-soft mesa-libGL libstdc++ pulseaudio pulseaudio-utils xorg-x11-server-Xvfb xorg-x11-drv-dummy dpkg mesa-dri-drivers\n
  before_script: # Put the variable into a Dockerfile
    - echo -e $DOCKERFILE > Dockerfile
    - cat Dockerfile
  script:
    - docker pull $CI_REGISTRY_IMAGE:linux-x64-gcc11 || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:linux-x64-gcc11 -t $CI_REGISTRY_IMAGE:linux-x64-gcc11 .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:linux-x64-gcc11
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .gitlab-ci.yml
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
      changes:
        - .gitlab-ci.yml

prepare:windows-x64-mingw:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  before_script: # Put the variable into a Dockerfile
    - cp platforms/windows/Dockerfile Dockerfile
  script:
    - docker pull $CI_REGISTRY_IMAGE:windows-x64-mingw || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:windows-x64-mingw -t $CI_REGISTRY_IMAGE:windows-x64-mingw .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:windows-x64-mingw
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - platforms/windows/Dockerfile
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
      changes:
        - platforms/windows/Dockerfile

prepare:deploy:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:33\n
      RUN dnf -y install openssl-devel python-devel python-setuptools libffi-devel python-pip rsync zip\n
      RUN pip install gsutil\n
  before_script: # Put the variable into a Dockerfile
    - echo -e $DOCKERFILE > Dockerfile
    - cat Dockerfile
  script:
    - docker pull $CI_REGISTRY_IMAGE:deploy || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:deploy -t $CI_REGISTRY_IMAGE:deploy .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .gitlab-ci.yml
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
      changes:
        - .gitlab-ci.yml

.build:android:
  stage: build
  image: kazade/android-sdk
  cache:
    key:
      files:
        - gradle/gradle/wrapper/gradle-wrapper.properties
    paths:
      - gradle/.gradle/caches/
      - gradle/.gradle/notifications/
      - gradle/.gradle/wrapper/
  script:
    - cd gradle
    - export ABI_FILTERS=${ABI}
    - ./gradlew --parallel --build-cache --gradle-user-home .gradle/ ${BUILD_JOB}
    - cd ..
    - mkdir -p ${TARGET}/${BUILD_TYPE}/simulant
    - mv gradle/simulant/build/outputs/aar/simulant-${BUILD_TYPE}.aar ${TARGET}/${BUILD_TYPE}/simulant/simulant-${BUILD_TYPE}.aar
    # - mkdir -p ${TARGET}/${BUILD_TYPE}/tests
    # - mv gradle/tests/build/outputs/apk/${BUILD_TYPE}/* ${TARGET}/${BUILD_TYPE}/tests
  artifacts:
    paths:
      - ${TARGET}/${BUILD_TYPE}/simulant/
      - ${TARGET}/${BUILD_TYPE}/tests/

build:android-all-clang:release:
  extends: .build:android
  variables:
    ABI: x86_64;armeabi-v7a;arm64-v8a
    TARGET: android-all-clang
    BUILD_TYPE: release
    BUILD_JOB: assembleRelease

build:android-all-clang:debug:
  extends: .build:android
  variables:
    ABI: x86_64;armeabi-v7a;arm64-v8a
    TARGET: android-all-clang
    BUILD_TYPE: debug
    BUILD_JOB: assembleDebug

build:psp-mips-gcc:debug:
  stage: build
  image: kazade/psp-sdk
  variables:
    TARGET: psp-mips-gcc
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - psp-cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/EBOOT.PBP

build:psp-mips-gcc:release:
  stage: build
  image: kazade/psp-sdk
  variables:
    TARGET: psp-mips-gcc
  script:
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - psp-cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/assets/
      - ${TARGET}/release/tests/EBOOT.PBP

test:psp-mips-gcc:
  stage: test
  image: fedora:33
  variables:
    TARGET: psp-mips-gcc
  needs: ["build:psp-mips-gcc:debug", "build:psp-mips-gcc:release"]
  dependencies:
    - build:psp-mips-gcc:debug
    - build:psp-mips-gcc:release
  before_script:
    - dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    - dnf install -y dpkg ppsspp-sdl pulseaudio pulseaudio-utils xorg-x11-server-Xvfb xorg-x11-drv-dummy mesa-dri-drivers
    - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render
    - sleep 3
    - export LIBGL_ALWAYS_SOFTWARE=1
    - export DISPLAY=:99
  script:
    - mkdir -p /root/.config/ppsspp/PSP/SYSTEM/
    - cd ${TARGET}/debug
    - export SIMULANT_SOUND_DRIVER=null
    - ln -s ../simulant simulant
    - ln -s ../assets assets
    - cp tests/EBOOT.PBP .
    # FIXME: PSP tests currently hang on future tests, we need to fix that!
    - timeout 120s PPSSPPSDL -d --escape-exit EBOOT.PBP || true
  artifacts:
    when: always
    reports:
      junit: ${TARGET}/debug/report.xml
    paths:
      - ${TARGET}/debug/simulant/libsimulant.a
      - ${TARGET}/release/simulant/libsimulant.a

build:windows-x64-vcxx:release:
  stage: build
  allow_failure: true
  tags:
    - saas-windows-medium-amd64
  variables:
    TARGET: windows-x64-vcxx
    MSBUILD: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe'
  before_script:
    - choco install -y cmake
    - $env:Path += ';C:\Program Files\CMake\bin'
  script:
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -G "Visual Studio 14 2015 Win64" -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - dir
    - '& "$MSBUILD" my.vcxproj'
  artifacts:
    paths:
      - ${TARGET}/release/simulant/*.dll

build:windows-x64-mingw:release:
  stage: build
  image: $CI_REGISTRY_IMAGE:windows-x64-mingw
  variables:
    MINGW_BIN_DIR: /usr/x86_64-w64-mingw32/sys-root/mingw/bin/
    TARGET: windows-x64-mingw
  script:
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - sleep 5 && set -m && mingw64-cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cp $MINGW_BIN_DIR/zlib1.dll simulant/
    - cp $MINGW_BIN_DIR/SDL2.dll simulant/
    - cp $MINGW_BIN_DIR/libgcc_s_seh-1.dll simulant/
    - cp $MINGW_BIN_DIR/libstdc++-6.dll simulant/
    - cp $MINGW_BIN_DIR/libwinpthread-1.dll simulant/
    - cp $MINGW_BIN_DIR/OpenAL32.dll simulant/
    - cp $MINGW_BIN_DIR/libssp-0.dll simulant/
  artifacts:
    paths:
      - ${TARGET}/release/simulant/*.dll

build:windows-x64-mingw:debug:
  stage: build
  image: $CI_REGISTRY_IMAGE:windows-x64-mingw
  variables:
    MINGW_BIN_DIR: /usr/x86_64-w64-mingw32/sys-root/mingw/bin/
    TARGET: windows-x64-mingw
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - sleep 5 && set -m && mingw64-cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cp $MINGW_BIN_DIR/zlib1.dll simulant/
    - cp $MINGW_BIN_DIR/SDL2.dll simulant/
    - cp $MINGW_BIN_DIR/libgcc_s_seh-1.dll simulant/
    - cp $MINGW_BIN_DIR/libstdc++-6.dll simulant/
    - cp $MINGW_BIN_DIR/libwinpthread-1.dll simulant/
    - cp $MINGW_BIN_DIR/OpenAL32.dll simulant/
    - cp $MINGW_BIN_DIR/libssp-0.dll simulant/
    - cp simulant/*.dll tests/
    # Windows test runners need software OpenGL to work
    - cp ../../platforms/windows/mesa/*.dll tests/
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests.exe
      - ${TARGET}/debug/tests/*.dll

test:windows-x64-mingw:
  stage: test
  allow_failure: true
  tags:
    - saas-windows-medium-amd64
  needs: ["build:windows-x64-mingw:debug", "build:windows-x64-mingw:release"]
  dependencies:
    - build:windows-x64-mingw:debug
    - build:windows-x64-mingw:release
  variables:
    TARGET: windows-x64-mingw
    SIMULANT_SOUND_DRIVER: "null"
    GALLIUM_DRIVER: softpipe
  script:
    - cd ${TARGET}/debug/tests
    - Copy-item -Recurse ..\simulant -Destination simulant
    - Copy-item -Recurse ..\assets -Destination assets
    - Get-ChildItem *.exe
    - Get-ChildItem *.dll
    - .\simulant_tests.exe --junit-xml=report.xml
  artifacts:
    reports:
      junit: ${TARGET}/debug/tests/report.xml
    paths:
      - ${TARGET}/debug/simulant/*.dll
      - ${TARGET}/release/simulant/*.dll

## clang build is currently just for checking compilation
build:linux-x64-clang:
  stage: build
  image: fedora:32
  variables:
    TARGET: linux-x64-clang
  before_script:
    - dnf install -y dnf && dnf clean all
    - dnf install -y cmake make clang python SDL2-devel openal-soft-devel zlib-devel mesa-libGL-devel
  script:
    - export CC=/usr/bin/clang
    - export CXX=/usr/bin/clang++
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/

build:evercade-armv7-gcc:
  stage: build
  image: kazade/evercade-sdk
  variables:
    TARGET: evercade-armv7-gcc
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=../../toolchains/Evercade.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../toolchains/Evercade.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/assets/
      - ${TARGET}/release/tests/simulant_tests

build:raspberrypi-armv7-gcc:
  stage: build
  image: kazade/raspberrypi-sdk
  variables:
    TARGET: raspberrypi-armv7-gcc
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=../../toolchains/RaspberryPi.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../toolchains/RaspberryPi.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/assets/
      - ${TARGET}/release/tests/simulant_tests

build:linux-x64-gcc:
  stage: build
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  variables:
    TARGET: linux-x64-gcc
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/assets/
      - ${TARGET}/release/tests/simulant_tests

build:linux-x64-gcc11:
  stage: build
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc11
  variables:
    TARGET: linux-x64-gcc11
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/assets/
      - ${TARGET}/release/tests/simulant_tests

test:linux-x64-gcc-debug:
  stage: test
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  needs: ["build:linux-x64-gcc"]
  dependencies:
    - build:linux-x64-gcc
  variables:
    TARGET: linux-x64-gcc
  before_script:
    - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render -noreset
    - sleep 2
    - export DISPLAY=:99
  script:
    - cd ${TARGET}/debug
    - export SIMULANT_SOUND_DRIVER=null
    - env SEGFAULT_SIGNALS="abrt segv" LD_PRELOAD=/usr/lib64/libSegFault.so ./tests/simulant_tests --junit-xml=report.xml
  artifacts:
    reports:
      junit: ${TARGET}/debug/report.xml
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/release/simulant/

test:linux-x64-gcc-release:
  stage: test
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  needs: ["build:linux-x64-gcc"]
  dependencies:
    - build:linux-x64-gcc
  variables:
    TARGET: linux-x64-gcc
  before_script:
    - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render -noreset
    - sleep 2
    - export DISPLAY=:99
  script:
    - cd ${TARGET}/release
    - export SIMULANT_SOUND_DRIVER=null
    - env SEGFAULT_SIGNALS="abrt segv" LD_PRELOAD=/usr/lib64/libSegFault.so ./tests/simulant_tests --junit-xml=report.xml
  artifacts:
    when: always
    paths:
      - ${TARGET}/debug/simulant/*.a
      - ${TARGET}/release/simulant/*.a
      - ${TARGET}/release/*.out
    reports:
      junit: ${TARGET}/release/report.xml

.build:macos-m1-gcc:
  stage: build
  image: macos-14-xcode-15
  tags:
    - saas-macos-medium-m1
  variables:
    TARGET: macos-m1-gcc
  before_script:
    - brew install glfw sdl2 python
  script:
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/assets/
      - ${TARGET}/release/tests/simulant_tests

build:dreamcast-sh4-gcc:
  stage: build
  image: kazade/dreamcast-sdk
  variables:
    TARGET: dreamcast-sh4-gcc
  script:
    - source /etc/bash.bashrc
    - mkdir -p ${TARGET}/debug
    - cd ${TARGET}/debug
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=../../toolchains/Dreamcast.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
    - cd ../..
    - mkdir -p ${TARGET}/release
    - cd ${TARGET}/release
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../toolchains/Dreamcast.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
    - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/assets/
      - ${TARGET}/debug/tests/simulant_tests.elf
      - ${TARGET}/release/simulant/

test:dreamcast-sh4-gcc:
  stage: test
  image: fedora:33
  needs: ["build:dreamcast-sh4-gcc"]
  allow_failure: true
  variables:
    TARGET: dreamcast-sh4-gcc
  dependencies:
    - build:dreamcast-sh4-gcc
  before_script:
    - dnf install -y wget unzip libisofs libpng mesa-libGL gtk2 pulseaudio-libs && dnf clean all
    - wget -O artifacts.zip https://gitlab.com/simulant/community/lxdream-nitro/-/jobs/artifacts/master/download?job=linux-x64:build
    - unzip artifacts.zip
    - export PATH=$PATH:`pwd`/build
  script:
    - cd ${TARGET}/debug
    - lxdream-nitro --audio=null -H -b -u -C `pwd` -e tests/simulant_tests.elf
  artifacts:
    when: always
    paths:
      - ${TARGET}/debug/simulant/*.a
      - ${TARGET}/release/simulant/*.a
      - ${TARGET}/release/*.out

.deploy:deploy:
  stage: deploy
  only:
    - master
    - main
    - next
    - tags
  variables:
    LIB_EXT: a
  image: $CI_REGISTRY_IMAGE:deploy
  script:
    - mkdir -p ./upload/${TARGET}/lib
    - mkdir -p ./upload/${TARGET}/lib/debug
    - mkdir -p ./upload/${TARGET}/lib/release
    - mkdir -p ./upload/${TARGET}/include/simulant
    - cp ${TARGET}/release/simulant/*.${LIB_EXT} ./upload/${TARGET}/lib/release/
    - cp ${TARGET}/debug/simulant/*.${LIB_EXT} ./upload/${TARGET}/lib/debug/
    - rsync -avm -L --include='*.h' --include='*.hpp' --include='*.inc' -f 'hide,! */' simulant ./upload/${TARGET}/include
    - cd upload
    - zip -r ${TARGET}.zip ${TARGET}/
    - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
    - gsutil cp ${TARGET}.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
    - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/${TARGET}.zip
  artifacts:
    paths:
      - upload/${TARGET}.zip

deploy:psp-mips-gcc:
  extends: .deploy:deploy
  needs: ["test:psp-mips-gcc"]
  dependencies:
    - test:psp-mips-gcc
  variables:
    TARGET: psp-mips-gcc

deploy:windows-x64-mingw:
  extends: .deploy:deploy
  needs: ["test:windows-x64-mingw"]
  dependencies:
    - test:windows-x64-mingw
  variables:
    TARGET: windows-x64-mingw
    LIB_EXT: dll

deploy:linux-x64-gcc:
  extends: .deploy:deploy
  needs:
    - build:linux-x64-gcc
    - test:linux-x64-gcc-debug
    - test:linux-x64-gcc-release
  dependencies:
    - test:linux-x64-gcc-debug
    - test:linux-x64-gcc-release
  variables:
    TARGET: linux-x64-gcc
    LIB_EXT: so*

deploy:linux-x64-gcc11:
  extends: .deploy:deploy
  needs:
    - build:linux-x64-gcc11
    - test:linux-x64-gcc-debug
    - test:linux-x64-gcc-release
  dependencies:
    - build:linux-x64-gcc11
    - test:linux-x64-gcc-debug
    - test:linux-x64-gcc-release
  variables:
    TARGET: linux-x64-gcc11
    LIB_EXT: so*

deploy:evercade-armv7-gcc:
  extends: .deploy:deploy
  needs:
    - build:evercade-armv7-gcc
  dependencies:
    - build:evercade-armv7-gcc
  variables:
    TARGET: evercade-armv7-gcc
    LIB_EXT: so*

deploy:raspberrypi-armv7-gcc:
  extends: .deploy:deploy
  needs:
    - build:raspberrypi-armv7-gcc
  dependencies:
    - build:raspberrypi-armv7-gcc
  variables:
    TARGET: raspberrypi-armv7-gcc
    LIB_EXT: so*

deploy:dreamcast-sh4-gcc:
  extends: .deploy:deploy
  needs: ["test:dreamcast-sh4-gcc"]
  dependencies:
    - test:dreamcast-sh4-gcc
  variables:
    TARGET: dreamcast-sh4-gcc

deploy:android-all-clang:
  extends: .deploy:deploy
  needs:
    - build:android-all-clang:release
    - build:android-all-clang:debug
  dependencies:
    - build:android-all-clang:release
    - build:android-all-clang:debug
  variables:
    TARGET: android-all-clang
    LIB_EXT: aar

deploy:assets:
  stage: deploy
  only:
    - master
    - main
    - next
    - tags
  image: $CI_REGISTRY_IMAGE:deploy
  script:
    - mkdir -p upload
    - mv assets upload/simulant
    - cd upload
    - zip -r assets.zip simulant/
    - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
    - gsutil cp assets.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
    - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/assets.zip
  artifacts:
    paths:
      - upload/assets.zip

deploy:tools:
  stage: deploy
  only:
    - master
    - main
    - next
    - tags
  image: $CI_REGISTRY_IMAGE:deploy
  script:
    - mkdir -p upload/simulant
    - mkdir -p upload/simulant/cmake_modules
    - cp tools/test_generator.py upload/simulant
    - cp cmake_modules/FindSDL2.cmake upload/simulant/cmake_modules
    - cp cmake_modules/FindSimulant.cmake upload/simulant/cmake_modules
    - cd upload
    - zip -r tools.zip simulant/
    - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
    - gsutil cp tools.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
    - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/tools.zip
  artifacts:
    paths:
      - upload/tools.zip
