include:
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/License-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_REF_NAME == "next"'
    - if: '$CI_COMMIT_TAG'
    
stages:
 - prepare
 - check
 - build
 - test
 - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp, simulant/deps

pages:
  stage: prepare
  image: fedora:33
  script:
   - dnf install -y doxygen python3 git
   - python3 tools/gendocs.py `pwd` `git describe --abbrev=4 --always --tags | cut -d - -f 1-2` `pwd`
   - mv `git describe --abbrev=4 --always --tags | cut -d - -f 1-2`/html public
  artifacts:
   paths:
    - public
  only:
    - master

prepare:linux-x64-gcc:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none  # Prevent cloning
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:32\n
      RUN dnf update -y && dnf clean all\n
      RUN dnf install -y cmake make gcc-c++ python SDL2-devel openal-soft-devel zlib-devel mesa-libGL-devel SDL2 openal-soft mesa-libGL libstdc++ pulseaudio pulseaudio-utils xorg-x11-server-Xvfb xorg-x11-drv-dummy dpkg mesa-dri-drivers\n
  before_script:  # Put the variable into a Dockerfile
     - echo -e $DOCKERFILE > Dockerfile
     - cat Dockerfile
  script:
     - docker pull $CI_REGISTRY_IMAGE:linux-x64-gcc || true
     - docker build --cache-from $CI_REGISTRY_IMAGE:linux-x64-gcc -t $CI_REGISTRY_IMAGE:linux-x64-gcc .
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
     - docker push $CI_REGISTRY_IMAGE:linux-x64-gcc
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        changes:
          - .gitlab-ci.yml
      - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
        changes:
          - .gitlab-ci.yml
          
prepare:linux-x64-gcc11:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none  # Prevent cloning
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:33\n
      RUN dnf update -y && dnf clean all\n
      RUN dnf install -y cmake make gcc-c++ python SDL2-devel openal-soft-devel zlib-devel mesa-libGL-devel SDL2 openal-soft mesa-libGL libstdc++ pulseaudio pulseaudio-utils xorg-x11-server-Xvfb xorg-x11-drv-dummy dpkg mesa-dri-drivers\n
  before_script:  # Put the variable into a Dockerfile
     - echo -e $DOCKERFILE > Dockerfile
     - cat Dockerfile
  script:
     - docker pull $CI_REGISTRY_IMAGE:linux-x64-gcc11 || true
     - docker build --cache-from $CI_REGISTRY_IMAGE:linux-x64-gcc11 -t $CI_REGISTRY_IMAGE:linux-x64-gcc11 .
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
     - docker push $CI_REGISTRY_IMAGE:linux-x64-gcc11
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        changes:
          - .gitlab-ci.yml
      - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
        changes:
          - .gitlab-ci.yml

prepare:windows-x64-mingw:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none  # Prevent cloning
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:38\n
      RUN dnf upgrade --refresh -y\n
      RUN dnf install -y mingw64-gcc-c++ mingw64-SDL2 mingw64-openal-soft mingw64-zlib cmake make gcc-c++ python wine winetricks wine-pulseaudio\n
      RUN wine64 wineboot\n
  before_script:  # Put the variable into a Dockerfile
     - echo -e $DOCKERFILE > Dockerfile
     - cat Dockerfile
  script:
     - docker pull $CI_REGISTRY_IMAGE:windows-x64-mingw || true
     - docker build --cache-from $CI_REGISTRY_IMAGE:windows-x64-mingw -t $CI_REGISTRY_IMAGE:windows-x64-mingw .
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
     - docker push $CI_REGISTRY_IMAGE:windows-x64-mingw
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        changes:
          - .gitlab-ci.yml
      - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
        changes:
          - .gitlab-ci.yml

prepare:deploy:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: none  # Prevent cloning
    DOCKERFILE: >- # Generate a Dockerfile for the build image
      FROM fedora:33\n
      RUN dnf -y install openssl-devel python-devel python-setuptools libffi-devel python-pip rsync zip\n
      RUN pip install gsutil\n
  before_script:  # Put the variable into a Dockerfile
     - echo -e $DOCKERFILE > Dockerfile
     - cat Dockerfile
  script:
     - docker pull $CI_REGISTRY_IMAGE:deploy || true
     - docker build --cache-from $CI_REGISTRY_IMAGE:deploy -t $CI_REGISTRY_IMAGE:deploy .
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
     - docker push $CI_REGISTRY_IMAGE:deploy
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        changes:
          - .gitlab-ci.yml
      - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
        changes:
          - .gitlab-ci.yml

check:thread-usage:
  stage: check
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  script:
    - python3 tools/find_std_thread.py simulant

check:deque-usage:
  stage: check
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  script:
    - python3 tools/find_std_deque.py simulant

check:stream-usage:
  stage: check
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  script:
    - python3 tools/find_std_stream.py simulant || true
  artifacts:
    reports:
      metrics: metrics.txt

.build:android:
  stage: build
  image: kazade/android-sdk
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
   - cd gradle
   - export ABI_FILTERS=${ABI}
   - gradle ${BUILD_JOB} --parallel --build-cache
   - cd ..
   - mkdir -p ${TARGET}/${BUILD_TYPE}/simulant
   - cp gradle/simulant/build/outputs/aar/*.aar ${TARGET}/${BUILD_TYPE}/simulant
   - mkdir -p ${TARGET}/${BUILD_TYPE}/tests
   - cp gradle/tests/build/outputs/apk/${BUILD_TYPE}/* ${TARGET}/${BUILD_TYPE}/tests
  artifacts:
    paths:
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/tests/
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
      
build:android-armeabiv7a-clang:release:
  extends: .build:android
  variables:
    ABI: armeabi-v7a
    TARGET: android-armeabiv7a-clang
    BUILD_TYPE: release
    BUILD_JOB: assembleRelease
    
build:android-armeabiv7a-clang:debug:
  extends: .build:android
  variables:
    ABI: armeabi-v7a
    TARGET: android-armeabiv7a-clang
    BUILD_TYPE: debug
    BUILD_JOB: assembleDebug
    
build:android-x86_64-clang:release:
  extends: .build:android
  variables:
    ABI: x86_64
    TARGET: android-x86_64-clang
    BUILD_TYPE: release
    BUILD_JOB: assembleRelease

build:android-x86_64-clang:debug:
  extends: .build:android
  variables:
    ABI: x86_64
    TARGET: android-x86_64-clang
    BUILD_TYPE: debug
    BUILD_JOB: assembleDebug
      
build:psp-mips-gcc:debug:
  stage: build
  image: sharkwouter/pspdev
  variables:
    TARGET: psp-mips-gcc
  script:
   - mkdir -p ${TARGET}/debug
   - cd ${TARGET}/debug
   - cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/PSP.cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/sample_data/
      - ${TARGET}/debug/tests/EBOOT.PBP

build:psp-mips-gcc:release:
  stage: build
  image: sharkwouter/pspdev
  variables:
    TARGET: psp-mips-gcc
  script:
   - mkdir -p ${TARGET}/release
   - cd ${TARGET}/release
   - cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/PSP.cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
  artifacts:
    paths:
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/sample_data/
      - ${TARGET}/release/tests/EBOOT.PBP

test:psp-mips-gcc:
  stage: test
  image: fedora:33
  variables:
    TARGET: psp-mips-gcc
  needs: ["build:psp-mips-gcc:debug", "build:psp-mips-gcc:release"]
  dependencies:
   - build:psp-mips-gcc:debug
   - build:psp-mips-gcc:release
  before_script:
   - dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
   - dnf install -y dpkg ppsspp-sdl pulseaudio pulseaudio-utils xorg-x11-server-Xvfb xorg-x11-drv-dummy mesa-dri-drivers
   - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render
   - sleep 3
   - export LIBGL_ALWAYS_SOFTWARE=1
   - export DISPLAY=:99
  script:
   - mkdir -p /root/.config/ppsspp/PSP/SYSTEM/
   - cd ${TARGET}/debug
   - export SIMULANT_SOUND_DRIVER=null
   - ln -s ../simulant simulant
   - ln -s ../sample_data sample_data
   - cp tests/EBOOT.PBP .
   # FIXME: PSP tests currently hang on future tests, we need to fix that!
   - timeout 120s PPSSPPSDL -d --escape-exit EBOOT.PBP || true
  artifacts:
   when: always
   reports:
      junit: ${TARGET}/debug/report.xml
   paths:
    - ${TARGET}/debug/simulant/libsimulant.a
    - ${TARGET}/release/simulant/libsimulant.a

deploy:psp-mips-gcc:
  stage: deploy
  only:
   - master
   - tags
  image: $CI_REGISTRY_IMAGE:deploy
  needs: ["test:psp-mips-gcc"]
  dependencies:
   - test:psp-mips-gcc
  variables:
   TARGET: psp-mips-gcc
  script:
   - mkdir -p ./upload/${TARGET}/lib
   - mkdir -p ./upload/${TARGET}/lib/debug
   - mkdir -p ./upload/${TARGET}/include/simulant
   - cp ${TARGET}/release/simulant/libsimulant.a ./upload/${TARGET}/lib/
   - cp ${TARGET}/debug/simulant/libsimulant.a ./upload/${TARGET}/lib/debug/
   - rsync -avm -L --include='*.h' --include='*.hpp' --include='*.inc' -f 'hide,! */' simulant ./upload/${TARGET}/include
   - cd upload
   - zip -r ${TARGET}.zip ${TARGET}/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp ${TARGET}.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/${TARGET}.zip
  artifacts:
   paths:
    - upload/${TARGET}.zip

build:windows-x64-mingw:release:
  stage: build
  image: $CI_REGISTRY_IMAGE:windows-x64-mingw
  variables:
    MINGW_BIN_DIR: /usr/x86_64-w64-mingw32/sys-root/mingw/bin/
    TARGET: windows-x64-mingw
  script:
   - mkdir -p ${TARGET}/release
   - cd ${TARGET}/release   
   - sleep 5 && set -m && mingw64-cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
   - cp $MINGW_BIN_DIR/zlib1.dll simulant/
   - cp $MINGW_BIN_DIR/SDL2.dll simulant/
   - cp $MINGW_BIN_DIR/libgcc_s_seh-1.dll simulant/
   - cp $MINGW_BIN_DIR/libstdc++-6.dll simulant/
   - cp $MINGW_BIN_DIR/libwinpthread-1.dll simulant/
   - cp $MINGW_BIN_DIR/OpenAL32.dll simulant/
   - cp $MINGW_BIN_DIR/libssp-0.dll simulant/
  artifacts:
    paths:
      - ${TARGET}/release/simulant/*.dll

build:windows-x64-mingw:debug:
  stage: build
  image: $CI_REGISTRY_IMAGE:windows-x64-mingw
  variables:
    MINGW_BIN_DIR: /usr/x86_64-w64-mingw32/sys-root/mingw/bin/
    TARGET: windows-x64-mingw
  script:
   - mkdir -p ${TARGET}/debug
   - cd ${TARGET}/debug
   - sleep 5 && set -m && mingw64-cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
   - cp $MINGW_BIN_DIR/zlib1.dll simulant/
   - cp $MINGW_BIN_DIR/SDL2.dll simulant/
   - cp $MINGW_BIN_DIR/libgcc_s_seh-1.dll simulant/
   - cp $MINGW_BIN_DIR/libstdc++-6.dll simulant/
   - cp $MINGW_BIN_DIR/libwinpthread-1.dll simulant/
   - cp $MINGW_BIN_DIR/OpenAL32.dll simulant/
   - cp $MINGW_BIN_DIR/libssp-0.dll simulant/
   - cp simulant/*.dll tests/
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/sample_data/
      - ${TARGET}/debug/tests/simulant_tests.exe
      - ${TARGET}/debug/tests/*.dll

test:windows-x64-mingw:
  stage: test
  image: $CI_REGISTRY_IMAGE:windows-x64-mingw
  needs: ["build:windows-x64-mingw:debug", "build:windows-x64-mingw:release"]
  variables:
    TARGET: windows-x64-mingw
  dependencies:
   - build:windows-x64-mingw:debug
   - build:windows-x64-mingw:release
  before_script:
   - dnf install -y xorg-x11-server-Xvfb xorg-x11-drv-dummy dpkg mesa-dri-drivers
   - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render
   - sleep 3
   - export LIBGL_ALWAYS_SOFTWARE=1
   - export SIMULANT_SOUND_DRIVER=null
   - export DISPLAY=:99
  script:
   - cd ${TARGET}/debug/tests
   - ln -s ../simulant
   - ln -s ../sample_data
   - wine64 simulant_tests.exe --junit-xml=report.xml
  artifacts:
   reports:
    junit: ${TARGET}/debug/tests/report.xml
   paths:
    - ${TARGET}/debug/simulant/*.dll
    - ${TARGET}/release/simulant/*.dll

deploy:windows-x64-mingw:
  stage: deploy
  only:
    - master
    - tags
  image: $CI_REGISTRY_IMAGE:deploy
  dependencies:
   - test:windows-x64-mingw
  variables:
   TARGET: windows-x64-mingw
  script:
   - mkdir -p ./upload/${TARGET}/lib
   - mkdir -p ./upload/${TARGET}/lib/debug
   - mkdir -p ./upload/${TARGET}/include/simulant
   - cp ${TARGET}/release/simulant/*.dll ./upload/${TARGET}/lib/
   - cp ${TARGET}/debug/simulant/*.dll ./upload/${TARGET}/lib/debug/
   - rsync -avm -L --include='*.h' --include='*.hpp' --include='*.inc' -f 'hide,! */' simulant ./upload/${TARGET}/include
   - cd upload
   - zip -r ${TARGET}.zip ${TARGET}/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp ${TARGET}.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/${TARGET}.zip
  artifacts:
   paths:
    - upload/${TARGET}.zip

## clang build is currently just for checking compilation
build:linux-x64-clang:
  stage: build
  image: fedora:32
  variables:
   TARGET: linux-x64-clang
  before_script:
   - dnf install -y dnf && dnf clean all
   - dnf install -y cmake make clang python SDL2-devel openal-soft-devel zlib-devel mesa-libGL-devel
  script:
   - export CC=/usr/bin/clang
   - export CXX=/usr/bin/clang++
   - mkdir -p ${TARGET}/debug
   - cd ${TARGET}/debug
   - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
   - cd ../..
   - mkdir -p ${TARGET}/release
   - cd ${TARGET}/release
   - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/sample_data/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/

build:linux-x64-gcc:
  stage: build
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  variables:
   TARGET: linux-x64-gcc
  script:
   - mkdir -p ${TARGET}/debug
   - cd ${TARGET}/debug
   - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
   - cd ../..
   - mkdir -p ${TARGET}/release
   - cd ${TARGET}/release
   - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/sample_data/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/sample_data/
      - ${TARGET}/release/tests/simulant_tests

build:linux-x64-gcc11:
  stage: build
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc11
  variables:
   TARGET: linux-x64-gcc11
  script:
   - mkdir -p ${TARGET}/debug
   - cd ${TARGET}/debug
   - cmake -DCMAKE_BUILD_TYPE=Debug -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
   - cd ../..
   - mkdir -p ${TARGET}/release
   - cd ${TARGET}/release
   - cmake -DCMAKE_BUILD_TYPE=Release -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
  artifacts:
    paths:
      - ${TARGET}/debug/simulant/
      - ${TARGET}/debug/sample_data/
      - ${TARGET}/debug/tests/simulant_tests
      - ${TARGET}/release/simulant/
      - ${TARGET}/release/sample_data/
      - ${TARGET}/release/tests/simulant_tests


test:linux-x64-gcc-debug:
  stage: test
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  needs: ["build:linux-x64-gcc"]
  dependencies:
   - build:linux-x64-gcc
  variables:
   TARGET: linux-x64-gcc
  before_script:
   - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render -noreset
   - sleep 2
   - export DISPLAY=:99
  script:
   - cd ${TARGET}/debug
   - export SIMULANT_SOUND_DRIVER=null
   - env SEGFAULT_SIGNALS="abrt segv" LD_PRELOAD=/usr/lib64/libSegFault.so ./tests/simulant_tests --junit-xml=report.xml
  artifacts:
   reports:
      junit: ${TARGET}/debug/report.xml
   paths:
    - ${TARGET}/debug/simulant/
    - ${TARGET}/release/simulant/

test:linux-x64-gcc-release:
  stage: test
  image: $CI_REGISTRY_IMAGE:linux-x64-gcc
  needs: ["build:linux-x64-gcc"]
  dependencies:
   - build:linux-x64-gcc
  variables:
   TARGET: linux-x64-gcc
  before_script:
   - start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 320x240x24 -ac +extension RANDR +extension GLX +render -noreset
   - sleep 2
   - export DISPLAY=:99
  script:
   - cd ${TARGET}/release
   - export SIMULANT_SOUND_DRIVER=null
   - env SEGFAULT_SIGNALS="abrt segv" LD_PRELOAD=/usr/lib64/libSegFault.so ./tests/simulant_tests --junit-xml=report.xml
  artifacts:
   reports:
      junit: ${TARGET}/release/report.xml

deploy:linux-x64-gcc:
  stage: deploy
  only:
   - master
   - tags
  image: $CI_REGISTRY_IMAGE:deploy
  dependencies:
   - test:linux-x64-gcc-debug
   - test:linux-x64-gcc-release
  variables:
   TARGET: linux-x64-gcc
  script:
   - mkdir -p ./upload/${TARGET}/lib
   - mkdir -p ./upload/${TARGET}/lib/debug
   - mkdir -p ./upload/${TARGET}/include/simulant
   - cp ${TARGET}/release/simulant/libsimulant.so* ./upload/${TARGET}/lib/
   - cp ${TARGET}/debug/simulant/libsimulant.so* ./upload/${TARGET}/lib/debug/
   - rsync -avm -L --include='*.h' --include='*.hpp' --include='*.inc' -f 'hide,! */' simulant ./upload/${TARGET}/include
   - cd upload
   - zip -r ${TARGET}.zip ${TARGET}/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp ${TARGET}.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/${TARGET}.zip
  artifacts:
   paths:
    - upload/${TARGET}.zip

deploy:linux-x64-gcc11:
  stage: deploy
  only:
   - master
   - tags
  image: $CI_REGISTRY_IMAGE:deploy
  dependencies:
   - build:linux-x64-gcc11
   - test:linux-x64-gcc-debug
   - test:linux-x64-gcc-release
  variables:
   TARGET: linux-x64-gcc11
  script:
   - mkdir -p ./upload/${TARGET}/lib
   - mkdir -p ./upload/${TARGET}/lib/debug
   - mkdir -p ./upload/${TARGET}/include/simulant
   - cp ${TARGET}/release/simulant/libsimulant.so* ./upload/${TARGET}/lib/
   - cp ${TARGET}/debug/simulant/libsimulant.so* ./upload/${TARGET}/lib/debug/
   - rsync -avm -L --include='*.h' --include='*.hpp' --include='*.inc' -f 'hide,! */' simulant ./upload/${TARGET}/include
   - cd upload
   - zip -r ${TARGET}.zip ${TARGET}/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp ${TARGET}.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/${TARGET}.zip
  artifacts:
   paths:
    - upload/${TARGET}.zip

build:dreamcast-sh4-gcc:
  stage: build
  image: kazade/dreamcast-sdk
  variables:
   TARGET: dreamcast-sh4-gcc
  script:
   - source /etc/bash.bashrc
   - mkdir -p ${TARGET}/debug
   - cd ${TARGET}/debug
   - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=../../toolchains/Dreamcast.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
   - cd ../..
   - mkdir -p ${TARGET}/release
   - cd ${TARGET}/release
   - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../toolchains/Dreamcast.cmake -DSIMULANT_BUILD_SAMPLES=OFF ../..
   - make -j3
  artifacts:
    paths:
     - ${TARGET}/debug/simulant/
     - ${TARGET}/debug/sample_data/
     - ${TARGET}/debug/tests/simulant_tests.elf
     - ${TARGET}/release/simulant/

test:dreamcast-sh4-gcc:
  stage: test
  image: fedora:33
  needs: ["build:dreamcast-sh4-gcc"]
  allow_failure: true
  variables:
   TARGET: dreamcast-sh4-gcc
  dependencies:
    - build:dreamcast-sh4-gcc
  before_script:
    - dnf install -y wget unzip libisofs libpng mesa-libGL gtk2 pulseaudio-libs && dnf clean all
    - wget -O artifacts.zip https://gitlab.com/simulant/community/lxdream-nitro/-/jobs/artifacts/master/download?job=linux-x64:build
    - unzip artifacts.zip
    - export PATH=$PATH:`pwd`/build
  script:
    - cd ${TARGET}/debug
    - lxdream-nitro --audio=null -H -b -u -C `pwd` -e tests/simulant_tests.elf
  artifacts:
   when: always
   paths:
    - ${TARGET}/debug/simulant/*.a
    - ${TARGET}/release/simulant/*.a
    - ${TARGET}/release/*.out

deploy:dreamcast-sh4-gcc:
  stage: deploy
  only:
   - master
   - tags
  image: $CI_REGISTRY_IMAGE:deploy
  dependencies:
   - test:dreamcast-sh4-gcc
  variables:
   TARGET: dreamcast-sh4-gcc
  script:
   - mkdir -p ./upload/${TARGET}/lib
   - mkdir -p ./upload/${TARGET}/lib/debug
   - mkdir -p ./upload/${TARGET}/include/simulant
   - cp ${TARGET}/release/simulant/libsimulant.a* ./upload/${TARGET}/lib/
   - cp ${TARGET}/debug/simulant/libsimulant.a* ./upload/${TARGET}/lib/debug/
   - rsync -avm -L --include='*.h' --include='*.hpp' --include='*.inc' -f 'hide,! */' simulant ./upload/${TARGET}/include
   - cd upload
   - zip -r ${TARGET}.zip ${TARGET}/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp ${TARGET}.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/${TARGET}.zip
  artifacts:
   paths:
    - upload/${TARGET}.zip

deploy:assets:
  stage: deploy
  only:
   - master
   - tags
  image: $CI_REGISTRY_IMAGE:deploy
  script:
   - mkdir -p upload
   - mv assets upload/simulant
   - cd upload
   - zip -r assets.zip simulant/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp assets.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/assets.zip
  artifacts:
   paths:
    - upload/assets.zip

deploy:tools:
  stage: deploy
  only:
   - master
   - tags
  image: $CI_REGISTRY_IMAGE:deploy
  script:
   - mkdir -p upload/simulant
   - mkdir -p upload/simulant/cmake_modules
   - cp tools/test_generator.py upload/simulant
   - cp cmake_modules/FindSDL2.cmake upload/simulant/cmake_modules
   - cd upload
   - zip -r tools.zip simulant/
   - echo -e "${GCS_ACCESS_KEY}\n${GCS_SECRET}\nsimulant-engine\n" | gsutil config -a
   - gsutil cp tools.zip gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/
   - gsutil acl ch -u AllUsers:R gs://staging.simulant-engine.appspot.com/${CI_COMMIT_REF_NAME}/tools.zip
  artifacts:
   paths:
    - upload/tools.zip
