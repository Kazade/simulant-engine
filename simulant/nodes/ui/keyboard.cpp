#include <vector>
#include "ui_manager.h"
#include "keyboard.h"
#include "button.h"
#include "frame.h"

#include "../../window.h"
#include "../../stage.h"
#include "../../application.h"
#include "../../event_listener.h"

namespace smlt {
namespace ui {


/* Attempts to match a Keyboard code to a character on a standard GB
 * keyboard. */
uint16_t keyboard_code_to_char(const KeyboardCode& code, KeyboardMode mode) {
    switch(code) {
        case KEYBOARD_CODE_0: return '0';
        case KEYBOARD_CODE_1: return '1';
        case KEYBOARD_CODE_2: return '2';
        case KEYBOARD_CODE_3: return '3';
        case KEYBOARD_CODE_4: return '4';
        case KEYBOARD_CODE_5: return '5';
        case KEYBOARD_CODE_6: return '6';
        case KEYBOARD_CODE_7: return '7';
        case KEYBOARD_CODE_8: return '8';
        case KEYBOARD_CODE_9: return '9';
        case KEYBOARD_CODE_A: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'a' : 'A';
        case KEYBOARD_CODE_B: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'b' : 'B';
        case KEYBOARD_CODE_C: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'c' : 'C';
        case KEYBOARD_CODE_D: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'd' : 'D';
        case KEYBOARD_CODE_E: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'e' : 'E';
        case KEYBOARD_CODE_F: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'f' : 'F';
        case KEYBOARD_CODE_G: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'g' : 'G';
        case KEYBOARD_CODE_H: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'h' : 'H';
        case KEYBOARD_CODE_I: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'i' : 'I';
        case KEYBOARD_CODE_J: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'j' : 'J';
        case KEYBOARD_CODE_K: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'k' : 'K';
        case KEYBOARD_CODE_L: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'l' : 'L';
        case KEYBOARD_CODE_M: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'm' : 'M';
        case KEYBOARD_CODE_N: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'n' : 'N';
        case KEYBOARD_CODE_O: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'o' : 'O';
        case KEYBOARD_CODE_P: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'p' : 'P';
        case KEYBOARD_CODE_Q: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'q' : 'Q';
        case KEYBOARD_CODE_R: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'r' : 'R';
        case KEYBOARD_CODE_S: return (mode == KEYBOARD_MODE_LOWERCASE) ? 's' : 'S';
        case KEYBOARD_CODE_T: return (mode == KEYBOARD_MODE_LOWERCASE) ? 't' : 'T';
        case KEYBOARD_CODE_U: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'u' : 'U';
        case KEYBOARD_CODE_V: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'v' : 'V';
        case KEYBOARD_CODE_W: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'w' : 'W';
        case KEYBOARD_CODE_X: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'x' : 'X';
        case KEYBOARD_CODE_Y: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'y' : 'Y';
        case KEYBOARD_CODE_Z: return (mode == KEYBOARD_MODE_LOWERCASE) ? 'z' : 'Z';
        case KEYBOARD_CODE_SPACE: return (mode == KEYBOARD_MODE_LOWERCASE) ? ' ' : ' ';
    default:
        return 0;
    }
}


class KeyboardListener : public EventListener {
public:
    KeyboardListener(Keyboard* keyboard):
        keyboard_(keyboard) {
        smlt::get_app()->window->register_event_listener(this);
    }

    ~KeyboardListener() {
        smlt::get_app()->window->unregister_event_listener(this);
    }

    void on_key_up(const KeyEvent& evt) override {
        if(!keyboard_->is_visible()) {
            return;
        }

        uint16_t chr = keyboard_code_to_char(evt.keyboard_code, keyboard_->mode());
        if(chr) {
            if(keyboard_->cursor_to_char(chr)) {
                keyboard_->activate();
            }
        } else {
            if(evt.keyboard_code == KEYBOARD_CODE_RETURN) {
                keyboard_->cursor_to_return();
                keyboard_->activate();
            } else if(evt.keyboard_code == KEYBOARD_CODE_BACKSPACE) {
                keyboard_->cursor_to_backspace();
                keyboard_->activate();
            } else if(evt.keyboard_code == KEYBOARD_CODE_CAPSLOCK) {
                keyboard_->cursor_to_case_toggle();
                keyboard_->activate();
            }
        }
    }

    void on_game_controller_button_up(const GameControllerEvent& evt) override {
        if(evt.index.to_int8_t() != 0) {
            return;
        }

        if(!keyboard_->is_visible()) {
            return;
        }

        if(evt.button == JOYSTICK_BUTTON_A) {
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_B) {
            keyboard_->cancel();
        } else if(evt.button == JOYSTICK_BUTTON_X) {
            keyboard_->cursor_to_backspace();
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_Y) {
            keyboard_->cursor_to_space();
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_START) {
            keyboard_->cursor_to_ok();
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_UP) {
            keyboard_->cursor_up();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_DOWN) {
            keyboard_->cursor_down();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_LEFT) {
            keyboard_->cursor_left();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_RIGHT) {
            keyboard_->cursor_right();
        }
    }

private:
    Keyboard* keyboard_ = nullptr;
};

const uint8_t SPACE_ICON [] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* GIMP RGB C-Source image dump (outline_language_black_24dp.c) */

static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[24 * 24 * 2 + 1];
} ACCENT_ICON = {
  24, 24, 2,
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\040\000\252R\064\245\333\336\236\367\236\367\333\336\024\245\252R\040\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212R\373\336\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\333\336\212R\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\214\377\377\377\377\272\326\034\347"
  "\377\377\327\275\327\275\377\377\034\347\272\326\377\377\377\377Q\214\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\214\377\377\276\367mk\303\030\337\377\337"
  "\377E)E)\337\377\337\377\303\030mk\276\367\377\377Q\214\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\212R\377\377\276\367(B\000\000\357{\377\377u\255\000\000\000\000u\255\377"
  "\377\357{\000\000(B\276\367\377\377\212R\000\000\000\000\000\000\000\000\000\000\040\000\373\336\377"
  "\377mk\000\000\000\000y\316\377\377IJ\000\000\000\000IJ\377\377y\316\000\000\000\000mk\377\377\333"
  "\336\040\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\252R\000\000\000\000\000\000\000\000\064\245\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\064\245\000\000\000\000\000"
  "\000\000\000\333\336\377\377\206\061\000\000\000\000,c\377\377\363\234\000\000\000\000\000\000\000\000\363"
  "\234\377\377,c\000\000\000\000\206\061\377\377\333\336\000\000\000\000\000\000\000\000\236\367\377"
  "\377\202\020\000\000\000\000\256s\377\377Q\214\000\000\000\000\000\000\000\000Q\214\377\377\256s\000"
  "\000\000\000\202\020\377\377\236\367\000\000\000\000\000\000\000\000\236\367\377\377\202\020\000\000"
  "\000\000\256s\377\377Q\214\000\000\000\000\000\000\000\000Q\214\377\377\256s\000\000\000\000\202\020\377"
  "\377\236\367\000\000\000\000\000\000\000\000\333\336\377\377\206\061\000\000\000\000,c\377\377\363"
  "\234\000\000\000\000\000\000\000\000\363\234\377\377,c\000\000\000\000\206\061\377\377\333\336\000\000"
  "\000\000\000\000\000\000\064\245\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\064\245\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\252R\000\000\000\000\000\000\000\000\040\000\373"
  "\336\377\377mk\000\000\000\000y\316\377\377IJ\000\000\000\000IJ\377\377y\316\000\000\000\000mk\377"
  "\377\333\336\040\000\000\000\000\000\000\000\000\000\000\000\212R\377\377\276\367(B\000\000\357{\377"
  "\377u\255\000\000\000\000u\255\377\377\357{\000\000(B\276\367\377\377\212R\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000Q\214\377\377\276\367mk\303\030\337\377\337\377E)E)\337"
  "\377\337\377\303\030mk\276\367\377\377Q\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000Q\214\377\377\377\377\272\326\034\347\377\377\327\275\327\275\377\377"
  "\034\347\272\326\377\377\377\377Q\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\212R\373\336\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\333\336\212R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\040\000\252R\064\245\333\336\236\367\236\367\333\336\024\245\252R\040\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000",
};


static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[48 * 48 * 2 + 1];
} OK_ICON = {
  48, 48, 2,
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\246\061\014c\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061\236\367\377\377"
  "mk\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\061\236\367\377\377\377\377<\347a\010\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\206\061\236\367\377\377\377\377\034\347\004!\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\206\061\236\367\377\377\377\377\034\347\004!\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061"
  "\236\367\377\377\377\377\034\347\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061\236\367\377"
  "\377\377\377\034\347\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061\236\367\377\377\377\377"
  "<\347\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061\236\367\377\377\377\377<\347$!\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000e)\236\367\377\377\377\377<\347$!\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014ce)"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061}"
  "\357\377\377\377\377]\357$!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377]\357E)\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e)}\357\377\377\377\377"
  "]\357$!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\242\020\377\377\377\377\377\377]\357$!\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\061}\357\377\377\377\377]\357"
  "E)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000iJ\337\377\377\377\377\377<\347\004!\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e)}\357\377\377\377\377]\357E)\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000iJ\377\377\377\377\377\377\034\347\343\030\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000e)}\357\377\377\377\377]\357E)\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377\373\336\343\030"
  "\000\000\000\000\000\000\000\000\000\000\000\000e)}\357\377\377\377\377]\357E)\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377\373\336\303"
  "\030\000\000\000\000\000\000\000\000e)}\357\377\377\377\377}\357E)\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377\333\336"
  "\242\020\000\000\000\000e)}\357\377\377\377\377}\357e)\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377\272"
  "\326\242\020e)}\357\377\377\377\377}\357e)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377\377"
  "\232\326}\357\377\377\377\377}\357e)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252R\377\377\377\377\377"
  "\377\377\377\377\377}\357e)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\313Z\377\377\377\377\377\377"
  "\236\367e)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\313Z\377\377\236\367\206\061\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\353Z\206\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000",
};

/* GIMP RGB C-Source image dump (outline_numbers_black_24dp.c) */

static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[24 * 24 * 2 + 1];
} DIGITS_ICON = {
  24, 24, 2,
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004!\377\377\373"
  "\336\000\000\000\000\000\000\004!\377\377\373\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\353Z\377\377\363\234\000\000\000\000\000\000\353Z\377\377\363"
  "\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\363\234"
  "\377\377\353Z\000\000\000\000\000\000\363\234\377\377\353Z\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\373\336\377\377\004!\000\000\000\000\000\000\373\336"
  "\377\377\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004!\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\373\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\353Z\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\363\234\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\363\234\377\377\353Z\000\000\000\000\000\000\363\234\377\377"
  "\353Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\373\336"
  "\377\377\004!\000\000\000\000\000\000\373\336\377\377\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\004!\377\377\373\336\000\000\000\000\000\000\004!\377\377\373"
  "\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\353Z\377"
  "\377\363\234\000\000\000\000\000\000\353Z\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\363\234\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\353Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\373\336\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004!\377\377\373"
  "\336\000\000\000\000\000\000\004!\377\377\373\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\353Z\377\377\363\234\000\000\000\000\000\000\353Z\377\377\363"
  "\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\363\234"
  "\377\377\353Z\000\000\000\000\000\000\363\234\377\377\353Z\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\373\336\377\377\004!\000\000\000\000\000\000\373\336"
  "\377\377\004!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
};


static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[16 * 16 * 2 + 1];
} ENTER_ICON = {
  16, 16, 2,
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\020\323\234\353Z\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000e)\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000e)\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\242\020\000\000\000\000\000\000e)\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\060\204\333\336(B\000\000\000\000e)\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\060\204\276\367\272\326\246\061\000\000\000\000e)\377\377\363\234\000\000\000\000\000\000\000"
  "\000\000\000\000\000\060\204\276\367\272\326\307\071\000\000\000\000\000\000e)\377\377\363\234\000"
  "\000\000\000\000\000\000\000\000\000\060\204\276\367\377\377\333\336\272\326\272\326\272\326"
  "\272\326\272\326\377\377\363\234\000\000\000\000\000\000\000\000\000\000\060\204\276\367\377\377"
  "\333\336\272\326\272\326\272\326\272\326\272\326\272\326\020\204\000\000\000\000\000"
  "\000\000\000\000\000\000\000\060\204\276\367\272\326\307\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\060\204\276\367\272\326\246\061\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\204\333\336(B\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
};

static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[16 * 16 * 2 + 1];
} CASE_TOGGLE_ICON = {
  16, 16, 2,
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\252R\252R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\252R\034\347\034\347\252R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252"
  "R\373\336\377\377\377\377\373\336\252R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\252R\034\347}\357}\357}\357}\357\034\347\252R\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\252R\373\336\236\367\256s\373\336\373\336\256s\236\367\373\336\252R\000"
  "\000\000\000\000\000\000\000\000\000\252R\034\347\236\367\317{\000\000\373\336\373\336\000\000\317{"
  "\236\367\034\347\252R\000\000\000\000\000\000\000\000\252R\272\326\256s\000\000\000\000\373\336\373"
  "\336\000\000\000\000\317{\272\326\252R\000\000\000\000\000\000\000\000\000\000E)\000\000\000\000\000\000\373\336"
  "\373\336\000\000\000\000\000\000e)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\373\336\373"
  "\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\373\336\373"
  "\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\347\034\347"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\317{\317{\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000",
};

static const struct {
  unsigned int 	 width;
  unsigned int 	 height;
  unsigned int 	 bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  unsigned char	 pixel_data[16 * 16 * 2 + 1];
} BACKSPACE_ICON = {
  16, 16, 2,
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\262"
  "\224\276\367\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\070\306\000\000\000\000,c}\357\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\000\000\343"
  "\030y\316\377\377\377\377\377\377\276\367\337\377\377\377\377\377\377\377"
  "}\357\377\377\377\377\377\377\377\377\000\000\064\245\377\377\377\377\377\377"
  "\377\377\262\224\222\224\337\377\377\377<\347,c\070\306\377\377\377\377\377"
  "\377,c\236\367\377\377\377\377\377\377\377\377<\347\014c\222\224\373\336\313"
  "Z\222\224\337\377\377\377\377\377\377\377\232\326\377\377\377\377\377\377"
  "\377\377\377\377\377\377<\347\313Z\246\061\222\224\276\367\377\377\377\377"
  "\377\377\377\377\232\326\377\377\377\377\377\377\377\377\377\377\377\377"
  "<\347\313Z\246\061\222\224\276\367\377\377\377\377\377\377\377\377,c\236\367"
  "\377\377\377\377\377\377\377\377<\347\014c\222\224\373\336\313Z\222\224\337"
  "\377\377\377\377\377\377\377\000\000\064\245\377\377\377\377\377\377\377\377\262"
  "\224\222\224\337\377\377\377<\347,c\070\306\377\377\377\377\377\377\000\000\343"
  "\030y\316\377\377\377\377\377\377\276\367\337\377\377\377\377\377\377\377"
  "}\357\377\377\377\377\377\377\377\377\000\000\000\000,c}\357\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  "\377\000\000\000\000\000\000\262\224\276\367\377\377\377\377\377\377\377\377\377\377"
  "\377\377\377\377\377\377\377\377\377\377\070\306\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
};

class KeyboardPanel:
    public Widget,
    public RefCounted<KeyboardPanel> {

    friend class Keyboard;

public:
    KeyboardPanel(UIConfig* config, Stage* stage):
        Widget(nullptr, config, stage) {}

    bool init() override {
        auto ret = Widget::init();
        if(!ret) {
            return ret;
        }

        auto load_icon = [=](const char* name, Icon* icon, int w, int h, int bpp, const uint8_t* data, TextureFormat fmt=TEXTURE_FORMAT_RGB_1US_565) {
            icon->tex = stage->assets->new_texture(w, h, fmt);
            icon->tex->set_data(data, w * h * bpp);
            icon->tex->convert(
                TEXTURE_FORMAT_RGBA_4UB_8888,
                {TEXTURE_CHANNEL_RED, TEXTURE_CHANNEL_RED, TEXTURE_CHANNEL_RED, TEXTURE_CHANNEL_RED}
            );
            icon->tex->flip_vertically();
            icon->tex->flush();

            icon->material = stage->assets->new_material_from_file(Material::BuiltIns::TEXTURE_ONLY);
            icon->material->set_blend_func(BLEND_ALPHA);
            icon->material->set_depth_test_enabled(false);
            icon->material->set_cull_mode(CULL_MODE_NONE);
            icon->material->set_diffuse_map(icon->tex);
            icon->submesh = mesh_->new_submesh(name, icon->material, MESH_ARRANGEMENT_TRIANGLE_STRIP);
        };

        load_icon("space", &space_, 16, 8, 1, SPACE_ICON, TEXTURE_FORMAT_R_1UB_8);
        load_icon("backspace", &backspace_, BACKSPACE_ICON.width, BACKSPACE_ICON.height, BACKSPACE_ICON.bytes_per_pixel, BACKSPACE_ICON.pixel_data);
        load_icon("case", &case_, CASE_TOGGLE_ICON.width, CASE_TOGGLE_ICON.height, CASE_TOGGLE_ICON.bytes_per_pixel, CASE_TOGGLE_ICON.pixel_data);
        load_icon("return", &return_, ENTER_ICON.width, ENTER_ICON.height, ENTER_ICON.bytes_per_pixel, ENTER_ICON.pixel_data);
        load_icon("ok", &ok_, OK_ICON.width, OK_ICON.height, OK_ICON.bytes_per_pixel, OK_ICON.pixel_data);
        load_icon("digits", &digits_, DIGITS_ICON.width, DIGITS_ICON.height, DIGITS_ICON.bytes_per_pixel, DIGITS_ICON.pixel_data);
        load_icon("accent", &accent_, ACCENT_ICON.width, ACCENT_ICON.height, ACCENT_ICON.bytes_per_pixel, ACCENT_ICON.pixel_data);

        return true;
    }

private:
    struct Icon {
        MaterialPtr material;
        TexturePtr tex;
        SubMeshPtr submesh;
    };

    Icon space_;
    Icon backspace_;
    Icon case_;
    Icon return_;
    Icon ok_;
    Icon digits_;
    Icon accent_;

    struct KeyInfo {
        int x = -1;  /* X/Y in positions, not pixels */
        int y = -1;

        UICoord center;  /*  Center position of the key */
        WidgetBounds bounds; /* Bounds of the key */
        char16_t displayed_character = 0;  /* Displayed char if any */

        /* Index of the first of the 4 vertices that make up the background
         * of this key */
        int32_t first_vertex_index = -1;
        bool is_focused = false;

        bool is_accent_key() const {
            return x == 0 && y == 4;
        }

        bool is_space_key() const {
            return x == 3 && y == 4;
        }

        bool is_case_toggle_key() const {
            return x == 1 && y == 4;
        }

        bool is_backspace_key() const {
            return x == 11 && y == 0;
        }

        bool is_ok_key() const {
            return x == 11 && y == 4;
        }

        bool is_return_key() const {
            return x == 11 && y == 2;
        }

        bool is_numerical_key() const {
            return x == 2 && y == 4;
        }
    };

    std::vector<KeyInfo> keys_;

    Px key_width() const {
        return line_height() * 3;
    }

    Px key_height() const {
        return line_height() * 2;
    }

    Px key_padding() const {
        return Px(2);
    }

    int columns() const {
        return 12;
    }

    int rows() const {
        return 5;
    }

    KeyInfo* find_key(int x, int y) {
        /* Space key override */
        if(x > 3 && x < 11 && y == 4) {
            x = 3;
        } else if(x == 11 && y == 1) {
            y = 2;
        } else if(x == 11 && y == 3) {
            y = 4;
        }

        for(auto& key: keys_) {
            if(key.x == x && key.y == y) {
                return &key;
            }
        }

        return nullptr;
    }

    KeyInfo* focused_key_ = nullptr;

    void focus_key(int x, int y) {
        auto fg_color = calc_foreground_colour();
        auto highlight_colour = theme_->highlight_colour_;

        auto key = find_key(x, y);
        if(key) {
            if(focused_key_) {
                mesh_->vertex_data->move_to(focused_key_->first_vertex_index);
                for(int i = 0; i < 4; ++i) {
                    mesh_->vertex_data->diffuse(fg_color);
                    mesh_->vertex_data->move_next();
                }
            }

            mesh_->vertex_data->move_to(key->first_vertex_index);
            for(int i = 0; i < 4; ++i) {
                mesh_->vertex_data->diffuse(highlight_colour);
                mesh_->vertex_data->move_next();
            }

            mesh_->vertex_data->done();
            focused_key_ = key;
        }
    }

    void finalize_render() override {
        render_key_letters();

        auto colour = smlt::Colour::WHITE;
        colour.a = (colour.a * style_->opacity_);

        /* Space key */
        auto key = find_key(3, 4); /* Forth row, 4th button */
        if(key) {
            WidgetBounds bounds;
            auto w = space_.tex->width() * 4;
            auto h = space_.tex->height();

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;
            new_rectangle("space", bounds, colour, nullptr);
        }

        /* Backspace */
        key = find_key(11, 0);
        if(key) {
            WidgetBounds bounds;
            auto w = backspace_.tex->width() / 2;
            auto h = backspace_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("backspace", bounds, colour, nullptr);
        }

        /* Return key */
        key = find_key(11, 2);
        if(key) {
            WidgetBounds bounds;
            auto w = return_.tex->width() / 2;
            auto h = return_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("return", bounds, colour, nullptr);
        }

        /* Accented chars */
        key = find_key(0, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = case_.tex->width() / 2;
            auto h = case_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("accent", bounds, colour, nullptr);
        }

        /* Toggle case */
        key = find_key(1, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = case_.tex->width() / 2;
            auto h = case_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("case", bounds, colour, nullptr);
        }

        /* Digits*/
        key = find_key(2, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = digits_.tex->width() / 2;
            auto h = digits_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("digits", bounds, colour, nullptr);
        }

        /* OK */
        key = find_key(11, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = ok_.tex->width() / 4;
            auto h = ok_.tex->height() / 4;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("ok", bounds, colour, nullptr);
        }
    }

    void finalize_build() override {
        if(!focused_key_) {
            focus_key(0, 0);
        }
    }

    void render_text() override {}

    void render_key_letters() {
        auto c = style_->text_colour_;
        c.set_alpha(style_->opacity_);

        auto sm = mesh_->find_submesh("text");
        assert(sm);

        /* Make sure the font material is up to date! */
        sm->set_material(font_->material());

        const char16_t row0 [] = {
            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-'
        };

        const char16_t row1_lower [] = {
            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '/'
        };

        const char16_t row1_upper [] = {
            'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '/'
        };

        const char16_t row1_numeric [] = {
            '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_'
        };

        const char16_t row1_accent_lower [] = {
            u'à', u'á', u'â', u'ã', u'ä', u'å', u'æ', u'ç', u'è', u'é', u'ê'
        };

        const char16_t row1_accent_upper [] = {
            u'À', u'Á', u'Â', u'Ã', u'Ä', u'Å', u'Æ', u'Ç', u'È', u'É', u'Ê'
        };

        const char16_t row2_lower [] = {
            'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':', '\''
        };

        const char16_t row2_upper [] = {
            'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '\''
        };

        const char16_t row2_numeric [] = {
            '~', '`', '=', '\\', '+', '{', '}', '|', '[', ']', u'£'
        };

        const char16_t row2_accent_lower [] = {
            u'ë', u'ì', u'í', u'î', u'ï', u'ð', u'ñ', u'ò', u'ó', u'ô', u'õ'
        };

        const char16_t row2_accent_upper [] = {
            u'Ë', u'Ì', u'Í', u'Î', u'Ï', u'Ð', u'Ñ', u'Ò', u'Ó', u'Ô', u'Õ'
        };

        const char16_t row3_lower [] = {
            'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '!', '?'
        };

        const char16_t row3_upper [] = {
            'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '!', '?'
        };

        const char16_t row3_numeric [] = {
            '<', '>', ';', ':', '"', '\'', ',', '.', '?', '/', u'¢'
        };

        const char16_t row3_accent_lower [] = {
            u'ö', u'ø', u'ù', u'ú', u'û', u'ü', u'ý', u'þ', u'ÿ', u'ß', u'\0'
        };

        const char16_t row3_accent_upper [] = {
            u'Ö', u'Ø', u'Ù', u'Ú', u'Û', u'Ü', u'Ý', u'Þ', u'¿', u'¡', u'\0'
        };

        const char16_t* row1 = (mode_ == KEYBOARD_MODE_LOWERCASE) ?
                row1_lower : (mode_ == KEYBOARD_MODE_NUMERICAL) ?
                row1_numeric : (mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) ?
                row1_accent_lower : (mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) ? row1_accent_upper : row1_upper;

        const char16_t* row2 = (mode_ == KEYBOARD_MODE_LOWERCASE) ?
                row2_lower : (mode_ == KEYBOARD_MODE_NUMERICAL) ?
                row2_numeric : (mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) ?
                row2_accent_lower : (mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) ? row2_accent_upper : row2_upper;

        const char16_t* row3 = (mode_ == KEYBOARD_MODE_LOWERCASE) ?
                row3_lower : (mode_ == KEYBOARD_MODE_NUMERICAL) ?
                row3_numeric : (mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) ?
                row3_accent_lower : (mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) ? row3_accent_upper : row3_upper;

        int y = 0;
        for(auto& row: {row0, row1, row2, row3}) {
            int x = 0;
            for(int i = 0; i < 11; ++i) {
                auto ch = row[i];

                Px ch_width = font_->character_width(ch);
                Px ch_height = font_->character_height(ch);
                auto min_max = font_->texture_coordinates_for_character(ch);

                auto info = find_key(x, y);
                if(info) {
                    WidgetBounds bounds;

                    bounds.min.x = info->center.x - (ch_width / 2);
                    bounds.max.x = info->center.x + (ch_width / 2);
                    bounds.min.y = info->center.y - (ch_height / 2);
                    bounds.max.y = info->center.y + (ch_height / 2);

                    const smlt::Vec2 uvs [] = {
                        smlt::Vec2(min_max.first.x, min_max.second.y),
                        smlt::Vec2(min_max.second.x, min_max.second.y),
                        smlt::Vec2(min_max.first.x, min_max.first.y),
                        smlt::Vec2(min_max.second.x, min_max.first.y)
                    };

                    sm = new_rectangle("text", bounds, c, uvs);

                    info->displayed_character = ch;
                }
                ++x;
            }

            ++y;
        }
    }

    Colour calc_foreground_colour() const {
        auto colour = style_->foreground_colour_;
        colour.set_alpha(colour.af() * style_->opacity_);
        return colour;
    }

    void render_foreground(const WidgetBounds& bounds) override {
        _S_UNUSED(bounds);

        auto colour = calc_foreground_colour();

        WidgetBounds total_bounds;
        total_bounds.min.y = total_bounds.min.x = 10000;
        total_bounds.max.y = total_bounds.max.x = -10000;

        WidgetBounds key_bounds;

        int focused_x = -1, focused_y = -1;

        if(focused_key_) {
            focused_x = focused_key_->x;
            focused_y = focused_key_->y;
        }

        keys_.clear();
        focused_key_ = nullptr;

        /* We build the key array here, this doesn't tell us what key
         * is which, but sets the positions of the keys */

        for(int y = 0; y < rows(); ++y) {
            for(int x = 0; x < columns(); ++x) {
                uint16_t displayed_char = 0;

                if(x < columns() - 1) {
                    key_bounds.min.x = (key_width() * x);
                    key_bounds.min.y = (key_height() * y);

                    key_bounds.min.x += key_padding() * (x);
                    key_bounds.min.y += key_padding() * (y);

                    key_bounds.min.x -= (bounds.width() / 2);
                    key_bounds.min.y -= (bounds.height() / 2);

                    if(y == 0 && x == 3) {
                        /* Space bar */
                        key_bounds.max.x = key_bounds.min.x + ((key_width() + key_padding()) * (columns() - 4)) - key_padding();
                        key_bounds.max.y = key_bounds.min.y + key_height();
                        displayed_char = ' ';
                    } else if((y == 0 && x < 3) || y > 0) {
                        /* All other keys */
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y + key_height();
                    } else {
                        continue;
                    }
                } else {
                    /* Right-hand action buttons! */
                    key_bounds.min.x = (key_width() * x);
                    key_bounds.min.y = (key_height() * y);

                    key_bounds.min.x += key_padding() * (x);
                    key_bounds.min.y += key_padding() * (y);

                    key_bounds.min.x -= (bounds.width() / 2);
                    key_bounds.min.y -= (bounds.height() / 2);

                    if(y == 4) {
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y + key_height();
                    } else if(y == 0) {
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y + (key_height() * 2) + key_padding();
                    } else if(y == 2) {
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y + (key_height() * 2) + key_padding();
                    } else {
                        continue;
                    }
                }

                KeyInfo new_key;
                new_key.x = x;
                new_key.y = rows() - y - 1;
                new_key.bounds = key_bounds;
                new_key.center = key_bounds.min;
                new_key.center.x += (key_bounds.width() / 2);
                new_key.center.y += (key_bounds.height() / 2);
                new_key.first_vertex_index = mesh_->vertex_data->count();
                new_key.displayed_character = displayed_char;

                keys_.push_back(new_key);

                total_bounds.min.x = std::min(new_key.bounds.min.x, total_bounds.min.x);
                total_bounds.min.y = std::min(new_key.bounds.min.y, total_bounds.min.y);
                total_bounds.max.x = std::max(new_key.bounds.max.x, total_bounds.max.x);
                total_bounds.max.y = std::max(new_key.bounds.max.y, total_bounds.max.y);

                new_rectangle("foreground", key_bounds, colour);
            }
        }

        if(focused_x > -1 && focused_y > -1) {
            focus_key(focused_x, focused_y);
        }
    }

    /* The content dimensions are nothing to do with the text. We don't do anything with
     * text set on a keyboard widget. Instead the dimensions are defined by the number of
     * keys and the font size etc. */
    UIDim calculate_content_dimensions(Px text_width, Px text_height) override {
        _S_UNUSED(text_width);
        _S_UNUSED(text_height);

        Px height = ((key_height() + key_padding()) * rows());
        Px width = ((key_width() + key_padding()) * columns());
        width -= key_padding();
        height -= key_padding();

        return UIDim(width, height);
    }

    KeyboardMode mode_ = KEYBOARD_MODE_LOWERCASE;
    void set_mode(KeyboardMode mode) {
        if(mode_ == mode) {
            return;
        }

        mode_ = mode;
        rebuild();
    }
};

Keyboard::Keyboard(UIManager *owner, UIConfig *config, Stage* stage, KeyboardMode mode, const unicode &initial_text):
    Widget(owner, config, stage) {

    resize(-1, -1);
    set_background_colour(smlt::Colour::NONE);
    set_foreground_colour(smlt::Colour::NONE);
    set_border_colour(smlt::Colour::NONE);
    set_text_colour(smlt::Colour::NONE);

    main_frame_ = owner->new_widget_as_frame("");
    main_frame_->set_parent(this);
    main_frame_->set_space_between(0);
    main_frame_->set_border_width(0);
    main_frame_->set_background_colour(config->background_colour_);
    main_frame_->set_border_colour(config->background_colour_);
    main_frame_->set_foreground_colour(smlt::Colour::NONE);

    panel_ = KeyboardPanel::create(config, stage);

    auto font = owner->load_or_get_font(
        "Cantarell",
        smlt::get_app()->config->ui.font_size,
        FONT_WEIGHT_NORMAL, FONT_STYLE_NORMAL
    );

    assert(font);

    panel_->set_background_colour(config->background_colour_);
    panel_->set_border_colour(config->background_colour_);
    panel_->set_border_width(2);
    panel_->set_font(font);
    panel_->rebuild();

    entry_ = Label::create(nullptr, config, stage);
    entry_->set_text(initial_text);
    entry_->set_border_width(2);
    entry_->resize(panel_->content_width(), panel_->line_height() * 2);
    entry_->set_font(font);
    entry_->set_background_colour(smlt::Colour::WHITE);
    entry_->set_border_colour(config->background_colour_);
    entry_->set_text_colour(config->foreground_colour_);
    entry_->set_text_alignment(TEXT_ALIGNMENT_LEFT);
    entry_->set_padding(Px(4));

    info_row_ = Frame::create(nullptr, config, stage);
    info_row_->set_border_colour(config->foreground_colour_);
    info_row_->set_border_width(2);
    info_row_->set_background_colour(style_->foreground_colour_);
    info_row_->set_foreground_colour(style_->foreground_colour_);
    info_row_->set_layout_direction(LAYOUT_DIRECTION_LEFT_TO_RIGHT);

    auto x_button = Label::create(nullptr, config, stage);
    x_button->set_text("X");
    x_button->set_text_colour(smlt::Colour::WHITE);
    x_button->resize(panel_->line_height() * 2, panel_->line_height() * 2);
    x_button->rebuild();

    auto x_label = Label::create(nullptr, config, stage);
    x_label->set_font(font_);
    x_label->set_background_colour(smlt::Colour::RED);
    x_label->set_text(_T("Cancel"));
    x_label->set_text_colour(smlt::Colour::WHITE);
    x_label->resize(-1, panel_->line_height() * 2);
    x_label->rebuild();

    info_row_->pack_child(x_button.get());
    info_row_->pack_child(x_label.get());
    info_row_->resize(panel_->content_width(), -1);
    info_row_->rebuild();

    main_frame_->pack_child(entry_.get());
    main_frame_->pack_child(panel_.get());
    main_frame_->pack_child(info_row_.get());
    main_frame_->rebuild();

    set_mode(mode);
}

Keyboard::~Keyboard() {
    main_frame_->unpack_child(entry_.get(), CHILD_CLEANUP_RETAIN);
    main_frame_->unpack_child(panel_.get(), CHILD_CLEANUP_RETAIN);
    main_frame_->unpack_child(info_row_.get(), CHILD_CLEANUP_RETAIN);
    panel_.reset();
    entry_.reset();
    info_row_.reset();
}

void Keyboard::cancel() {
    entry_->set_text("");
    panel_->focus_key(0, 0);
    signal_cancelled_();
}

void Keyboard::activate() {
    auto focused = panel_->focused_key_;
    if(!focused) {
        return;
    }

    auto txt = entry_->text();
    if(focused->displayed_character) {
        txt.push_back(focused->displayed_character);
        entry_->set_text(txt);
    } else if(focused->is_backspace_key()) {
        txt.pop_back();
        entry_->set_text(txt);
    } else if(focused->is_space_key()) {
        txt.push_back(' ');
        entry_->set_text(txt);
    } else if(focused->is_accent_key()) {
        if(panel_->mode_ == KEYBOARD_MODE_LOWERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_LOWERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_UPPERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_UPPERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_NUMERICAL) {
            set_mode(KEYBOARD_MODE_ACCENT_LOWERCASE);
        } else {
            /* We were already in an accent screen, so turn it off */
            set_mode(KEYBOARD_MODE_LOWERCASE);
        }
    } else if(focused->is_case_toggle_key()) {
        if(panel_->mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_UPPERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_LOWERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_LOWERCASE) {
            set_mode(KEYBOARD_MODE_UPPERCASE);
        } else {
            set_mode(KEYBOARD_MODE_LOWERCASE);
        }
    } else if(focused->is_ok_key()) {
        signal_done_(entry_->text());
        entry_->set_text("");
    } else if(focused->is_numerical_key()) {
        set_mode(KEYBOARD_MODE_NUMERICAL);
    }
}

void Keyboard::set_mode(KeyboardMode mode) {
    panel_->set_mode(mode);
}

KeyboardMode Keyboard::mode() const {
    return panel_->mode_;
}

void Keyboard::set_keyboard_integration_enabled(bool value) {
    if(value && !keyboard_listener_) {
        keyboard_listener_ = std::make_shared<KeyboardListener>(this);
    } else if(!value) {
        keyboard_listener_.reset();
    }
}

void Keyboard::set_font(FontPtr font) {
    /*panel_->set_font(font);
    panel_->rebuild();
    entry_->set_font(font);
    entry_->rebuild();

    info_row_->set_font(font);
    info_row_->rebuild();

    main_frame_->set_font(font);
    main_frame_->rebuild();

    Widget::set_font(font);*/
}

void Keyboard::on_transformation_change_attempted() {
    auto ap = anchor_point();
    main_frame_->set_anchor_point(ap.x, ap.y);
    main_frame_->rebuild();
    Widget::on_transformation_change_attempted();
}

UIDim Keyboard::calculate_content_dimensions(Px text_width, Px text_height) {
    _S_UNUSED(text_width);
    _S_UNUSED(text_height);

    UIDim ret;
    if(main_frame_) {
        ret.width = main_frame_->content_width();
        ret.height = main_frame_->content_height();
    }

    return ret;
}

void Keyboard::cursor_to_space() {
    for(auto& k: panel_->keys_) {
        if(k.is_space_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_ok() {
    for(auto& k: panel_->keys_) {
        if(k.is_ok_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_backspace() {
    for(auto& k: panel_->keys_) {
        if(k.is_backspace_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_return() {
    for(auto& k: panel_->keys_) {
        if(k.is_return_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_case_toggle() {
    for(auto& k: panel_->keys_) {
        if(k.is_case_toggle_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

bool Keyboard::cursor_to_char(uint16_t displayed_char) {
    for(auto& k: panel_->keys_) {
        if(k.displayed_character == displayed_char) {
            panel_->focus_key(k.x, k.y);
            return true;
        }
    }

    return false;
}

void Keyboard::cursor_up() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x, focused->y - 1);

        if(focused->is_return_key()) {
            new_key = panel_->find_key(11, 0); // Backspace
        } else if(focused->is_ok_key()) {
            new_key = panel_->find_key(11, 2);  // Return key
        }

        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

void Keyboard::cursor_down() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x, focused->y + 1);

        if(focused->is_backspace_key()) {
            new_key = panel_->find_key(11, 2);  // Return key
        } else if(focused->is_return_key()) {
            new_key = panel_->find_key(11, 4);  // OK key
        }

        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

void Keyboard::cursor_right() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x + 1, focused->y);
        if(focused->is_space_key()) {
            new_key = panel_->find_key(11, 4);  // OK key
        }

        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

void Keyboard::cursor_left() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x - 1, focused->y);
        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

}
}
