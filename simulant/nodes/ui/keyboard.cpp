#include "keyboard.h"
#include "button.h"
#include "frame.h"
#include "label.h"
#include "simulant/nodes/stage_node.h"
#include "simulant/nodes/ui/ui_config.h"
#include "simulant/nodes/ui/widget.h"
#include "simulant/utils/params.h"
#include "text_entry.h"
#include "ui_manager.h"
#include <vector>

#include "../../application.h"
#include "../../event_listener.h"
#include "../../stage.h"
#include "../../window.h"

namespace smlt {
namespace ui {

class KeyboardPanel;
}
} // namespace smlt

namespace smlt {
namespace ui {

/* Attempts to match a Keyboard code to a character on a standard GB
 * keyboard. */
uint16_t keyboard_code_to_char(const KeyboardCode& code, KeyboardMode mode) {
    switch(code) {
        case KEYBOARD_CODE_0:
            return '0';
        case KEYBOARD_CODE_1:
            return '1';
        case KEYBOARD_CODE_2:
            return '2';
        case KEYBOARD_CODE_3:
            return '3';
        case KEYBOARD_CODE_4:
            return '4';
        case KEYBOARD_CODE_5:
            return '5';
        case KEYBOARD_CODE_6:
            return '6';
        case KEYBOARD_CODE_7:
            return '7';
        case KEYBOARD_CODE_8:
            return '8';
        case KEYBOARD_CODE_9:
            return '9';
        case KEYBOARD_CODE_A:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'a' : 'A';
        case KEYBOARD_CODE_B:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'b' : 'B';
        case KEYBOARD_CODE_C:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'c' : 'C';
        case KEYBOARD_CODE_D:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'd' : 'D';
        case KEYBOARD_CODE_E:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'e' : 'E';
        case KEYBOARD_CODE_F:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'f' : 'F';
        case KEYBOARD_CODE_G:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'g' : 'G';
        case KEYBOARD_CODE_H:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'h' : 'H';
        case KEYBOARD_CODE_I:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'i' : 'I';
        case KEYBOARD_CODE_J:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'j' : 'J';
        case KEYBOARD_CODE_K:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'k' : 'K';
        case KEYBOARD_CODE_L:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'l' : 'L';
        case KEYBOARD_CODE_M:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'm' : 'M';
        case KEYBOARD_CODE_N:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'n' : 'N';
        case KEYBOARD_CODE_O:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'o' : 'O';
        case KEYBOARD_CODE_P:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'p' : 'P';
        case KEYBOARD_CODE_Q:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'q' : 'Q';
        case KEYBOARD_CODE_R:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'r' : 'R';
        case KEYBOARD_CODE_S:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 's' : 'S';
        case KEYBOARD_CODE_T:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 't' : 'T';
        case KEYBOARD_CODE_U:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'u' : 'U';
        case KEYBOARD_CODE_V:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'v' : 'V';
        case KEYBOARD_CODE_W:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'w' : 'W';
        case KEYBOARD_CODE_X:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'x' : 'X';
        case KEYBOARD_CODE_Y:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'y' : 'Y';
        case KEYBOARD_CODE_Z:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? 'z' : 'Z';
        case KEYBOARD_CODE_SPACE:
            return (mode == KEYBOARD_MODE_LOWERCASE) ? ' ' : ' ';
        default:
            return 0;
    }
}

class KeyboardListener: public EventListener {
public:
    KeyboardListener(Keyboard* keyboard) :
        keyboard_(keyboard) {
        smlt::get_app()->window->register_event_listener(this);
    }

    ~KeyboardListener() {
        smlt::get_app()->window->unregister_event_listener(this);
    }

    void on_key_down(const KeyEvent& evt) override {
        if(!keyboard_->is_visible()) {
            return;
        }

        uint16_t chr =
            keyboard_code_to_char(evt.keyboard_code, keyboard_->mode());
        if(chr) {
            if(keyboard_->cursor_to_char(chr)) {
                keyboard_->activate();
            }
        } else {
            if(evt.keyboard_code == KEYBOARD_CODE_RETURN) {
                if(evt.modifiers.lshift || evt.modifiers.rshift) {
                    keyboard_->cursor_to_ok();
                } else {
                    keyboard_->cursor_to_return();
                }
                keyboard_->activate();
            } else if(evt.keyboard_code == KEYBOARD_CODE_BACKSPACE) {
                keyboard_->cursor_to_backspace();
                keyboard_->activate();
            } else if(evt.keyboard_code == KEYBOARD_CODE_CAPSLOCK) {
                keyboard_->cursor_to_case_toggle();
                keyboard_->activate();
            } else if(evt.keyboard_code == KEYBOARD_CODE_LCTRL) {
                keyboard_->activate();
            } else if(evt.keyboard_code == KEYBOARD_CODE_UP) {
                keyboard_->cursor_up();
            } else if(evt.keyboard_code == KEYBOARD_CODE_DOWN) {
                keyboard_->cursor_down();
            } else if(evt.keyboard_code == KEYBOARD_CODE_LEFT) {
                keyboard_->cursor_left();
            } else if(evt.keyboard_code == KEYBOARD_CODE_RIGHT) {
                keyboard_->cursor_right();
            }
        }
    }

    void on_game_controller_button_down(
        const GameControllerEvent& evt) override {
        if(evt.index.to_int8_t() != 0) {
            return;
        }

        if(!keyboard_->is_visible()) {
            return;
        }

        if(evt.button == JOYSTICK_BUTTON_A) {
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_B) {
            keyboard_->cancel();
        } else if(evt.button == JOYSTICK_BUTTON_X) {
            keyboard_->cursor_to_backspace();
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_Y) {
            keyboard_->cursor_to_space();
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_START) {
            keyboard_->cursor_to_ok();
            keyboard_->activate();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_UP) {
            keyboard_->cursor_up();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_DOWN) {
            keyboard_->cursor_down();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_LEFT) {
            keyboard_->cursor_left();
        } else if(evt.button == JOYSTICK_BUTTON_DPAD_RIGHT) {
            keyboard_->cursor_right();
        } else if(evt.button == JOYSTICK_BUTTON_LEFT_SHOULDER) {
            keyboard_->entry()->caret_left();
        } else if(evt.button == JOYSTICK_BUTTON_RIGHT_SHOULDER) {
            keyboard_->entry()->caret_right();
        }
    }

private:
    Keyboard* keyboard_ = nullptr;
};
/* GIMP RGB C-Source image dump (space_bar_FILL0_wght400_GRAD0_opsz48.c) */

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[32 * 32 * 2 + 1];
} SPACE_ICON = {
    32,
    32,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\367\275\377\377\010B\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\010B\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\010B\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\010B\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\010B\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\010B\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\010B\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\010B\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\010B\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\010B\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\010B\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\010B\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\367\275\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\367"
    "\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000",
};

/* GIMP RGB C-Source image dump (outline_language_black_24dp.c) */

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[32 * 32 * 2 + 1];
} ACCENT_ICON = {
    32,
    32,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\202\020E)\307\071\010B\010B\246\061E)"
    "\202\020\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "E)\323\234\232\326]\357\276\367\377\377\377\377\276\367]\357\232\326\262"
    "\224$!"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\004!"
    "\323\234\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\337\377\262\224\004!"
    "\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\252R\373\336\377\377\377\377\377\377"
    "\377\377\377\377\377\377\333\336\333\336\377\377\377\377\377\377\377\377"
    "\377\377\377\377\373\336\212R\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\353Z\236\367\377\377\377\377\272\326mk\327\275\377\377"
    "\276\367I"
    "JIJ\276\367\377\377\327\275mk\272\326\377\377\377\377\236\367\313Z\000\000"
    "\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\252R\236\367\377\377\337\377Q\214"
    "\303\030\246\061\337\377\377\377\367\275A\010A\010\367\275\377\377\337\377"
    "\246"
    "\061\303\030q\214\337\377\377\377\236\367\212R\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000"
    "\000\000\000\000\004!"
    "\373\336\377\377\337\377\060\204\040\000\000\000\064\245\377\377\377\377"
    "iJ\000\000\000\000iJ\377\377\377\377\064\245\000\000\040\000\060\204\337"
    "\377\377\377\373\336"
    "\004!"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\262\224"
    "\377\377\377\377q\214\040\000\000\000"
    "\242\020\272\326\377\377\272\326\040\000\000\000\000\000\040\000\272\326"
    "\377\377\272\326"
    "\242\020\000\000\040\000q\214\377\377\377\377\262\224\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000"
    "E)\377\377\377\377]"
    "\357\313Z\010B\010BMk\276\367\377\377\064\245\010B\010B\010"
    "B\010B\064\245\377\377\276\367Mk\010B\010B\313Z]\357\377\377\337\377E)"
    "\000\000\000"
    "\000\000\000\000\000\000\000\000\000\262\224\377\377\377\377\377\377\377"
    "\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\262\224\000\000\000\000\000\000\000\000\000\000\202\020\232\326\377\377"
    "\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\232\326\202\020\000\000\000\000\000\000\000\000E)]"
    "\357\377\377u\255\010B\010"
    "B\010B\010B\373\336\377\377\373\336iJ\010B\010B\010B\010BiJ\373\336\377"
    "\377\373"
    "\336\010B\010B\010B\010Bu\255\377\377]\357E)"
    "\000\000\000\000\000\000\000\000\307\071\276\367\377"
    "\377,"
    "c\000\000\000\000\000\000\000\000\034\347\377\377Y\316A\010\000\000\000"
    "\000\000\000\000\000A\010Y\316\377"
    "\377\034\347\000\000\000\000\000\000\000\000,"
    "c\377\377\276\367\307\071\000\000\000\000\000\000\000\000\010B"
    "\377\377\377\377iJ\000\000\000\000\000\000\000\000\276\367\377\377\030\306"
    "\000\000\000\000\000\000\000\000"
    "\000\000\000\000\030\306\377\377\276\367\000\000\000\000\000\000\000\000iJ"
    "\377\377\377\377\010B\000\000"
    "\000\000\000\000\000\000\010B\377\377\377\377iJ\000\000\000\000\000\000"
    "\000\000\276\367\377\377\367\275"
    "\000\000\000\000\000\000\000\000\000\000\000\000\030\306\377\377\276\367"
    "\000\000\000\000\000\000\000\000iJ\377\377"
    "\377\377\010B\000\000\000\000\000\000\000\000\307\071\276\367\377\377,"
    "c\000\000\000\000\000\000\000\000\034"
    "\347\377\377\070\306\040\000\000\000\000\000\000\000\000\000A\010Y\316\377"
    "\377\034\347\000\000\000\000"
    "\000\000\000\000,"
    "c\377\377\276\367\307\071\000\000\000\000\000\000\000\000E)]"
    "\357\377\377u\255\010"
    "B\010B\010B\010B\373\336\377\377\333\336iJ\010B\010B\010B\010BiJ\373\336"
    "\377\377"
    "\373\336\010B\010B\010B\010Bu\255\377\377]\357E)"
    "\000\000\000\000\000\000\000\000\202\020\232\326"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\232\326\202\020\000\000"
    "\000\000\000"
    "\000\000\000\000\000\262\224\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\262\224"
    "\000\000\000\000\000\000\000\000\000\000\000\000E)\377\377\377\377]"
    "\357\313Z\010B\010BMk\276\367\377"
    "\377\064\245\010B\010B\010B\010B\064\245\377\377\276\367Mk\010B\010B\313Z]"
    "\357\377"
    "\377\337\377E)"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\262\224\377\377"
    "\377\377q\214\040"
    "\000\000\000\242\020\272\326\377\377\272\326\040\000\000\000\000\000\040"
    "\000\272\326\377\377\272"
    "\326\242\020\000\000\040\000q\214\377\377\377\377\262\224\000\000\000\000"
    "\000\000\000\000\000\000\000\000"
    "\000\000\000\000\004!"
    "\373\336\377\377\337\377\060\204\040\000\000\000\064\245\377\377\377\377"
    "iJ\000\000\000\000iJ\377\377\377\377\064\245\000\000\040\000\060\204\337"
    "\377\377\377\373\336"
    "\004!"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\252R\236\367\377\377\337\377Q\214"
    "\303\030\246\061\337\377\377\377\367\275A\010A\010\367\275\377\377\337\377"
    "\246"
    "\061\303\030q\214\337\377\377\377\236\367\212R\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\353Z\236\367\377\377\377\377\272\326mk"
    "\327\275\377\377\276"
    "\367IJIJ\276\367\377\377\327\275mk\272\326\377\377\377\377\236\367\313Z"
    "\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\252R\373\336\377\377\377"
    "\377\377\377\377\377\377\377\377\377\333\336\333\336\377\377\377\377\377"
    "\377\377\377\377\377\377\377\373\336\212R\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004!"
    "\323\234\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\262\224\004!"
    "\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E)"
    "\323\234\232\326]\357\276\367\377\377\377\377\276\367]\357\232\326\262\224"
    "$!"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\202\020E)\307\071\010B\010B\246\061E)"
    "\202\020\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000",
};

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[32 * 32 * 2 + 1];
} OK_ICON = {
    32,
    32,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\004!\020\204\242\020\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\343\030y\316\377\377\262"
    "\224\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\004!"
    "y\316\377\377\070\306\202\020\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\303\030y\316\377\377\070\306\303\030\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\004!"
    "y\316\377\377\070\306\202\020\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\303\030y\316"
    "\377\377\070\306\303\030\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\242\020\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\343\030y\316\377"
    "\377\070\306\242\020\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\206\061y\316("
    "B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\303\030y\316\377\377"
    "Y\316\303\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\363\234\377\377\276\367\010B\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\343\030y\316\377"
    "\377Y\316\242\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000a\010\363\234\377\377]"
    "\357\347\071\000\000\000\000\000\000\000\000\000\000\303\030y\316"
    "\377\377Y\316\343\030\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000a\010U\255\377\377}"
    "\357\307\071\000\000\000\000\000\000\343\030y\316"
    "\377\377Y\316\242\020\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\010\024\245\377"
    "\377<\347\246\061\000\000\303\030y\316"
    "\377\377y\316\343\030\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a"
    "\010u\255\377\377]\357IJy\316\377\377"
    "y\316\303\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a"
    "\010\024\245\377\377\276\367\377\377y"
    "\316\343\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\202\020u\255\377\377y\316\303\030"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\202\020\357{\004!\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
};
/* GIMP RGB C-Source image dump (glyphs_FILL0_wght400_GRAD0_opsz48.c) */

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[32 * 32 * 2 + 1];
} DIGITS_ICON = {
    32,
    32,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A\010"
    "\004!"
    "\303\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\307\071\070\306\323"
    "\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\357{\373"
    "\336\333\336\202\020\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\206\061\337\377"
    "\367\275\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000a\010y\316"
    "\377\377\377\377Mk\000\000\000\000\000\000\000\000\000\000\232\326\232\326"
    "\232\326\232\326\232"
    "\326\232\326]"
    "\357y\316\232\326\232\326\232\326\232\326\232\326\246\061\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\061\276\367"
    "\333\336]\357\030\306\040\000\000\000"
    "\000\000\000\000\000\000\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\010B\000\000\000\000\000\000"
    "\000\000\000\000\000\000"
    "\000\000\000\000q\214\377\377\212R\030\306}\357e)"
    "\000\000\000\000\000\000\000\000e)e)\353Z\337\377"
    "\373\336\010Be)e)"
    "q\214\377\377\030\306\206\061\206\061a\010\000\000\000\000\000\000\000\000"
    "\000"
    "\000\000\000\000\000A\010\236\367<"
    "\347\040\000\216s\377\377\256s\000\000\000\000\000\000\000\000\000\000\000"
    "\000a\010y\316\337\377\252R\000\000A\010\373\336\377\377("
    "B\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000,"
    "c\377\377\060\204\000\000\202\020\276\367\272\326\040\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000(B\337\377<"
    "\347\307\071\064\245\377\377\064\245\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\367"
    "\275\276\367\307\071\000\000\000\000\064\245"
    "\377\377(B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\317{"
    "\377\377\236\367\337\377\272\326"
    "\303\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000E)]\357\377\377\377\377\377"
    "\377\377\377\377\377\377\377u\255\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000E)\333\336\377"
    "\377\377\377\216s\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000mk\377\377\034"
    "\347\232\326\232\326\232\326\232\326\276\367\034\347\004!"
    "\000\000\000\000\000\000\000\000a\010"
    "\317{\373\336\377\377\276\367\377\377\236\367\363\234E)"
    "\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\272\326\377\377e)"
    "\000\000\000\000\000\000\000\000\064\245\377\377\212R"
    "\000\000\000\000\202\020\222\224}"
    "\357\377\377\276\367U\255\202\020mk\373\336\377\377"
    "\337\377\327\275\347\071\000\000\000\000\000\000\000\000\000\000\000\000"
    "\010B\377\377Y\316\000\000\000\000"
    "\000\000\000\000\000\000IJ\377\377\266\265\000\000\000\000a\010y\316\337"
    "\377\024\245\347\071\040"
    "\000\000\000\000\000\004!\317{<"
    "\347\377\377\347\071\000\000\000\000\000\000\000\000\000\000\000\000\246"
    "\061\353"
    "ZE)"
    "\000\000\000\000\000\000\000\000\000\000\000\000\353Z\353Z\000\000\000\000"
    "\000\000\347\071\202\020\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\040\000("
    "B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000E)\323\234y\316\266\265(B\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\040\000A\010\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000E)"
    "\034\347\377\377\377\377\377\377\276\367\014"
    "c\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\010\307\071\000"
    "\000\000\000\000\000\000\000\000\000\000\000\222\224"
    "\226\265A\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060"
    "\204\377\377\367\275\246\061q\214"
    "\377\377Y\316A\010\000\000\000\000\000\000\000\000\000\000\303\030<"
    "\347\377\377u\255A\010\000\000\000"
    "\000A\010\222\224\377\377}\357("
    "B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\245\377\377"
    "\014c\000\000$!<"
    "\347\333\336\303\030\000\000\000\000\000\000\000\000\000\000\212R\377\377"
    "\377\377\333"
    "\336\303\030\000\000\000\000\222\224\337\377}"
    "\357iJ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\317{\377\377\367\275\303\030\357{"
    "\377\377\070\306A\010\000\000\000\000\000\000\000\000\000"
    "\000A\010\070\306\034\347q\214\000\000A\010\222\224\377\377}"
    "\357\313Z\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\004!"
    "\373\336\377\377\333\336\377\377\276\367(B\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000a\010\004!"
    "\040\000\000\000\222\224\337\377}\357iJ\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Mk\377\377"
    "\377\377\337\377\313Z\000\000\343\030"
    "\030\306Mk\000\000\000\000\000\000\000\000\000\000\000\000A\010\222\224"
    "\377\377}\357\313Z\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\353Z<"
    "\347\377\377\377\377\377\377\226"
    "\265$!"
    "Y\316\377\377\373\336a\010\000\000\000\000\000\000\000\000\000\000\222\224"
    "\337\377}\357"
    "iJ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\307\071\377\377\276\367\363"
    "\234\010B\034\347\377\377\276\367\377\377\034\347\206\061\000\000\000\000"
    "\000\000\000\000A\010"
    "\222\224\377\377}"
    "\357\313Z\000\000\202\020MkMk\202\020\000\000\000\000\000\000\000\000\000"
    "\000\000\000"
    "\000\000\024\245\377\377q\214A\010\000\000("
    "B\276\367\377\377\377\377\307\071\000\000\000\000"
    "\000\000\000\000\000\000\222\224\337\377}"
    "\357iJ\000\000\000\000\256s\377\377\377\377\256s\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\266\265\377\377Mk\000\000"
    "\343\030Y\316\377\377\337\377"
    "\377\377\266\265\202\020\000\000\000\000A\010\222\224\377\377}"
    "\357\313Z\000\000\000\000\000\000"
    "\020\204\377\377\377\377\020\204\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\216s\377\377}"
    "\357\367\275\373\336\377\377<"
    "\347\252R\034\347\377\377mk\000\000\000\000\343\030\373"
    "\336}"
    "\357iJ\000\000\000\000\000\000\000\000\303\030q\214q\214\303\030\000\000"
    "\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000u\255\276\367\377\377\337\377\030\306$!"
    "\000\000\246\061\064\245\202\020"
    "\000\000\000\000\000\000\246\061\313Z\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\040\000\246\061iJ\347\071\242\020"
    "\000\000\000\000\000\000\040\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
};

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[16 * 16 * 2 + 1];
} ENTER_ICON = {
    16,
    16,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\020\323\234"
    "\353Z\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000e)"
    "\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000e)"
    "\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\242\020\000\000\000\000\000\000e)"
    "\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\060\204\333\336(B\000\000\000\000e)"
    "\377\377\363\234\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\060\204\276\367\272\326\246\061\000\000\000\000e)"
    "\377\377\363\234\000\000\000\000\000\000\000"
    "\000\000\000\000\000\060\204\276\367\272\326\307\071\000\000\000\000\000"
    "\000e)\377\377\363\234\000"
    "\000\000\000\000\000\000\000\000\000\060\204\276\367\377\377\333\336\272"
    "\326\272\326\272\326"
    "\272\326\272\326\377\377\363\234\000\000\000\000\000\000\000\000\000\000"
    "\060\204\276\367\377\377"
    "\333\336\272\326\272\326\272\326\272\326\272\326\272\326\020\204\000\000"
    "\000\000\000"
    "\000\000\000\000\000\000\000\060\204\276\367\272\326\307\071\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\060\204\276\367\272\326"
    "\246\061\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060"
    "\204\333\336(B\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242"
    "\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
};

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[16 * 16 * 2 + 1];
} CASE_TOGGLE_ICON = {
    16,
    16,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\252R\252R\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\252R\034\347\034\347\252R\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\252"
    "R\373\336\377\377\377\377\373\336\252R\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000"
    "\000\252R\034\347}\357}\357}\357}"
    "\357\034\347\252R\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\252R\373\336\236\367\256s\373\336\373\336\256s\236\367\373\336\252R"
    "\000"
    "\000\000\000\000\000\000\000\000\000\252R\034\347\236\367\317{"
    "\000\000\373\336\373\336\000\000\317{"
    "\236\367\034\347\252R\000\000\000\000\000\000\000\000\252R\272\326\256s"
    "\000\000\000\000\373\336\373"
    "\336\000\000\000\000\317{"
    "\272\326\252R\000\000\000\000\000\000\000\000\000\000E)"
    "\000\000\000\000\000\000\373\336"
    "\373\336\000\000\000\000\000\000e)"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\373\336\373"
    "\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\373\336\373"
    "\336\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\034\347\034\347"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\317{\317{\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000",
};

/* GIMP RGB C-Source image dump (backspace_FILL0_wght400_GRAD0_opsz48.c) */

static const struct {
    unsigned int width;
    unsigned int height;
    unsigned int bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
    unsigned char pixel_data[32 * 32 * 2 + 1];
} BACKSPACE_ICON = {
    32,
    32,
    2,
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000a\010\347\071\010B\010B\010B\010B\010B\010"
    "B\010B\010B\010B\010B\010B\010"
    "B\010B\010B\307\071A\010\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\303\030\070\306\337\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377Q\214"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000A\010u\255\377\377\272\326"
    "\367\275\367\275\367\275\367\275\367\275\367\275\367\275\367\275\367\275"
    "\367\275\367\275\367\275\367\275\367\275\377\377\276\367\000\000\000\000"
    "\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\353Z\337"
    "\377<\347E)\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\377\377\377\377\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000E)"
    "\276\367\377\377\014c\000\000\000\000\000\000A\010\040\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\202\020\000\000\000\000\000\000\377"
    "\377\377\377\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\242\020\070\306\377\377\363\234"
    "\000\000\000\000\000\000A\010\226\265"
    "\222\224\000\000\000\000\000\000\000\000\000\000\252R\367\275\343\030\000"
    "\000\000\000\377\377\377\377"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\020\204\377\377\272\326\303\030\000"
    "\000\000\000\000\000(B}\357\377\377\222\224A\010\000\000\000\000iJ}"
    "\357\337\377\216s\000\000\000\000"
    "\377\377\377\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000(B\276\367\377\377(B"
    "\000\000\000\000\000\000\000\000\000\000iJ}"
    "\357\337\377\222\224\000\000\252R}\357\377\377\262\224"
    "A\010\000\000\000\000\377\377\377\377\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\343\030\333\336"
    "\377\377\060\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\313Z}\357\377\377\266\265}\357"
    "\337\377\262\224\000\000\000\000\000\000\000\000\377\377\377\377\000\000"
    "\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\064\245\377\377Y\316\202\020\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000iJ}\357"
    "\377\377\377\377\262\224A\010\000\000\000\000\000\000\000\000\377\377\377"
    "\377\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\064\245\377\377Y\316\202\020\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000iJ}"
    "\357\377\377\377\377\222\224A\010\000\000\000\000\000\000\000\000\377\377"
    "\377\377"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\343\030"
    "\333\336\377\377\060\204\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\252R}\357\377\377\327\275}"
    "\357\337\377\222\224\000\000\000\000"
    "\000\000\000\000\377\377\377\377\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000(B\276\367\377"
    "\377(B\000\000\000\000\000\000\000\000\000\000iJ}"
    "\357\337\377\262\224\000\000\313Z}\357\377\377\222"
    "\224A\010\000\000\000\000\377\377\377\377\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000"
    "\020\204\377\377\272\326\303\030\000\000\000\000\000\000(B}"
    "\357\377\377\262\224A\010\000\000"
    "\000\000iJ}"
    "\357\337\377\020\204\000\000\000\000\377\377\377\377\000\000\000\000\000"
    "\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\242\020\070\306\377\377\363\234\000"
    "\000\000\000\000\000A\010\226\265"
    "\222\224\000\000\000\000\000\000\000\000\000\000\313Z\232\326\206\061\000"
    "\000\000\000\377\377\377\377"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000E)\276\367\377\377\014c\000\000\000"
    "\000\000\000A\010\040\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\303\030\000\000\000\000\000\000\377\377\377\377"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\353Z\337\377<\347E)\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\377\377\377\377\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000A\010\226\265\377\377\272\326"
    "\367\275\367\275\367\275\367\275\367\275\367\275\367\275\367\275\367\275"
    "\367\275\367\275\367\275\367\275\367\275\377\377\276\367\000\000\000\000"
    "\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\303\030\070\306\337\377\377\377\377\377"
    "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
    "\377\377\377\377\377\377\337\377Q\214\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000a\010\347\071\010B\010B\010B\010B"
    "\010B\010B\010B\010B\010B\010B\010"
    "B\010B\010B\010B\307\071A\010\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    "\000\000\000\000\000\000\000\000",
};

class KeyboardPanel: public Widget, public RefCounted<KeyboardPanel> {

    friend class Keyboard;

public:
    S_DEFINE_STAGE_NODE_META(STAGE_NODE_TYPE_WIDGET_KEYBOARD_PANEL,
                             "keyboard_panel");

    KeyboardPanel(Scene* owner) :
        Widget(owner, STAGE_NODE_TYPE_WIDGET_KEYBOARD_PANEL) {}

    bool on_create(Params params) override {
        if(!Widget::on_create(params)) {
            return false;
        }

        auto load_icon = [=](const char* name, Icon* icon, int w, int h,
                             int bpp, const uint8_t* data,
                             TextureFormat fmt = TEXTURE_FORMAT_RGB_1US_565) {
            icon->tex = scene->assets->create_texture(w, h, fmt);
            icon->tex->set_data(data, w * h * bpp);
            icon->tex->convert(TEXTURE_FORMAT_RGBA_4UB_8888,
                               {TEXTURE_CHANNEL_RED, TEXTURE_CHANNEL_RED,
                                TEXTURE_CHANNEL_RED, TEXTURE_CHANNEL_RED});
            icon->tex->flip_vertically();
            icon->tex->flush();

            icon->material =
                scene->assets->load_material(Material::BuiltIns::TEXTURE_ONLY);
            icon->material->set_blend_func(BLEND_ALPHA);
            icon->material->set_depth_test_enabled(false);
            icon->material->set_cull_mode(CULL_MODE_NONE);
            icon->material->set_diffuse_map(icon->tex);
            icon->submesh = mesh_->create_submesh(
                name, icon->material, MESH_ARRANGEMENT_TRIANGLE_STRIP);
        };

        load_icon("space", &space_, SPACE_ICON.width, SPACE_ICON.height,
                  SPACE_ICON.bytes_per_pixel, SPACE_ICON.pixel_data);
        load_icon("backspace", &backspace_, BACKSPACE_ICON.width,
                  BACKSPACE_ICON.height, BACKSPACE_ICON.bytes_per_pixel,
                  BACKSPACE_ICON.pixel_data);
        load_icon("case", &case_, CASE_TOGGLE_ICON.width,
                  CASE_TOGGLE_ICON.height, CASE_TOGGLE_ICON.bytes_per_pixel,
                  CASE_TOGGLE_ICON.pixel_data);
        load_icon("return", &return_, ENTER_ICON.width, ENTER_ICON.height,
                  ENTER_ICON.bytes_per_pixel, ENTER_ICON.pixel_data);
        load_icon("ok", &ok_, OK_ICON.width, OK_ICON.height,
                  OK_ICON.bytes_per_pixel, OK_ICON.pixel_data);
        load_icon("digits", &digits_, DIGITS_ICON.width, DIGITS_ICON.height,
                  DIGITS_ICON.bytes_per_pixel, DIGITS_ICON.pixel_data);
        load_icon("accent", &accent_, ACCENT_ICON.width, ACCENT_ICON.height,
                  ACCENT_ICON.bytes_per_pixel, ACCENT_ICON.pixel_data);

        focused_key_ = nullptr;
        return true;
    }

private:
    struct Icon {
        MaterialPtr material;
        TexturePtr tex;
        SubMeshPtr submesh;
    };

    Icon space_;
    Icon backspace_;
    Icon case_;
    Icon return_;
    Icon ok_;
    Icon digits_;
    Icon accent_;

    struct KeyInfo {
        int x = -1; /* X/Y in positions, not pixels */
        int y = -1;

        UICoord center;                   /*  Center position of the key */
        WidgetBounds bounds;              /* Bounds of the key */
        char16_t displayed_character = 0; /* Displayed char if any */

        /* Index of the first of the 4 vertices that make up the background
         * of this key */
        int32_t first_vertex_index = -1;
        bool is_focused = false;

        bool is_accent_key() const {
            return x == 0 && y == 4;
        }

        bool is_space_key() const {
            return x == 3 && y == 4;
        }

        bool is_case_toggle_key() const {
            return x == 1 && y == 4;
        }

        bool is_backspace_key() const {
            return x == 11 && y == 0;
        }

        bool is_ok_key() const {
            return x == 11 && y == 4;
        }

        bool is_return_key() const {
            return x == 11 && y == 2;
        }

        bool is_numerical_key() const {
            return x == 2 && y == 4;
        }
    };

    std::vector<KeyInfo> keys_;

    Px key_width() const {
        /* We use a 4:3 aspect ratio to determine what the keyboard width should
         * be, and use 80% of that. This should work on all platforms including
         * ultra-wide monitors */
        auto w = smlt::get_app()->window->height() * (4 / 3);
        w *= 0.8f;
        return Px(w / 12);
    }

    Px key_height() const {
        auto h = smlt::get_app()->window->height();
        h *= 0.25f;
        return Px(h / 5);
    }

    Px key_padding() const {
        return Px(2);
    }

    int columns() const {
        return 12;
    }

    int rows() const {
        return 5;
    }

    KeyInfo* find_key(int x, int y) {
        /* Space key override */
        if(x > 3 && x < 11 && y == 4) {
            x = 3;
        } else if(x == 11 && y == 1) {
            y = 2;
        } else if(x == 11 && y == 3) {
            y = 4;
        }

        for(auto& key: keys_) {
            if(key.x == x && key.y == y) {
                return &key;
            }
        }

        return nullptr;
    }

    KeyInfo* focused_key_ = nullptr;

    void focus_key(int x, int y) {
        auto fg_color = calc_foreground_color();
        auto highlight_color = theme_.highlight_color_;

        auto key = find_key(x, y);
        if(key) {
            if(focused_key_) {
                assert(mesh_);

                auto idx = focused_key_->first_vertex_index;
                mesh_->vertex_data->move_to(idx);

                for(int i = 0; i < 4; ++i) {
                    mesh_->vertex_data->color(fg_color);
                    mesh_->vertex_data->move_next();
                }
            }

            mesh_->vertex_data->move_to(key->first_vertex_index);
            for(int i = 0; i < 4; ++i) {
                mesh_->vertex_data->color(highlight_color);
                mesh_->vertex_data->move_next();
            }

            mesh_->vertex_data->done();
            focused_key_ = key;
        }
    }

    void finalize_render() override {
        render_key_letters();

        auto color = smlt::Color::white();
        color.a = (color.a * style_->opacity_);

        /* Space key */
        auto key = find_key(3, 4); /* Forth row, 4th button */
        if(key) {
            WidgetBounds bounds;
            auto w = space_.tex->width() / 2;
            auto h = space_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;
            new_rectangle("space", bounds, color, 0, nullptr);
        }

        /* Backspace */
        key = find_key(11, 0);
        if(key) {
            WidgetBounds bounds;
            auto w = backspace_.tex->width() / 2;
            auto h = backspace_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("backspace", bounds, color, 0, nullptr);
        }

        /* Return key */
        key = find_key(11, 2);
        if(key) {
            WidgetBounds bounds;
            auto w = return_.tex->width() / 2;
            auto h = return_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("return", bounds, color, 0, nullptr);
        }

        /* Accented chars */
        key = find_key(0, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = case_.tex->width() / 2;
            auto h = case_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("accent", bounds, color, 0, nullptr);
        }

        /* Toggle case */
        key = find_key(1, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = case_.tex->width() / 2;
            auto h = case_.tex->height() / 2;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("case", bounds, color, 0, nullptr);
        }

        /* Digits*/
        key = find_key(2, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = digits_.tex->width() / 4;
            auto h = digits_.tex->height() / 4;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("digits", bounds, color, 0, nullptr);
        }

        /* OK */
        key = find_key(11, 4);
        if(key) {
            WidgetBounds bounds;
            auto w = ok_.tex->width() / 4;
            auto h = ok_.tex->height() / 4;

            bounds.min.x = key->center.x - w;
            bounds.max.x = key->center.x + w;

            bounds.min.y = key->center.y - h;
            bounds.max.y = key->center.y + h;

            new_rectangle("ok", bounds, color, 0, nullptr);
        }
    }

    void finalize_build() override {
        if(!focused_key_) {
            focus_key(0, 0);
        }
    }

    void render_text() override {}

    void render_key_letters() {
        auto c = style_->text_color_;
        c.set_alpha(style_->opacity_);

        const char16_t row0[] = {'1', '2', '3', '4', '5', '6',
                                 '7', '8', '9', '0', '-'};

        const char16_t row1_lower[] = {'q', 'w', 'e', 'r', 't', 'y',
                                       'u', 'i', 'o', 'p', '/'};

        const char16_t row1_upper[] = {'Q', 'W', 'E', 'R', 'T', 'Y',
                                       'U', 'I', 'O', 'P', '/'};

        const char16_t row1_numeric[] = {'!', '@', '#', '$', '%', '^',
                                         '&', '*', '(', ')', '_'};

        const char16_t row1_accent_lower[] = {
            u'à', u'á', u'â', u'ã', u'ä', u'å', u'æ', u'ç', u'è', u'é', u'ê'};

        const char16_t row1_accent_upper[] = {
            u'À', u'Á', u'Â', u'Ã', u'Ä', u'Å', u'Æ', u'Ç', u'È', u'É', u'Ê'};

        const char16_t row2_lower[] = {'a', 's', 'd', 'f', 'g', 'h',
                                       'j', 'k', 'l', ':', '\''};

        const char16_t row2_upper[] = {'A', 'S', 'D', 'F', 'G', 'H',
                                       'J', 'K', 'L', ':', '\''};

        const char16_t row2_numeric[] = {'~', '`', '=', '\\', '+', '{',
                                         '}', '|', '[', ']',  u'£'};

        const char16_t row2_accent_lower[] = {
            u'ë', u'ì', u'í', u'î', u'ï', u'ð', u'ñ', u'ò', u'ó', u'ô', u'õ'};

        const char16_t row2_accent_upper[] = {
            u'Ë', u'Ì', u'Í', u'Î', u'Ï', u'Ð', u'Ñ', u'Ò', u'Ó', u'Ô', u'Õ'};

        const char16_t row3_lower[] = {'z', 'x', 'c', 'v', 'b', 'n',
                                       'm', ',', '.', '!', '?'};

        const char16_t row3_upper[] = {'Z', 'X', 'C', 'V', 'B', 'N',
                                       'M', ',', '.', '!', '?'};

        const char16_t row3_numeric[] = {'<', '>', ';', ':', '"', '\'',
                                         ',', '.', '?', '/', u'¢'};

        const char16_t row3_accent_lower[] = {
            u'ö', u'ø', u'ù', u'ú', u'û', u'ü', u'ý', u'þ', u'ÿ', u'ß', u'\0'};

        const char16_t row3_accent_upper[] = {
            u'Ö', u'Ø', u'Ù', u'Ú', u'Û', u'Ü', u'Ý', u'Þ', u'¿', u'¡', u'\0'};

        const char16_t* row1 =
            (mode_ == KEYBOARD_MODE_LOWERCASE)          ? row1_lower
            : (mode_ == KEYBOARD_MODE_NUMERICAL)        ? row1_numeric
            : (mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) ? row1_accent_lower
            : (mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) ? row1_accent_upper
                                                        : row1_upper;

        const char16_t* row2 =
            (mode_ == KEYBOARD_MODE_LOWERCASE)          ? row2_lower
            : (mode_ == KEYBOARD_MODE_NUMERICAL)        ? row2_numeric
            : (mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) ? row2_accent_lower
            : (mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) ? row2_accent_upper
                                                        : row2_upper;

        const char16_t* row3 =
            (mode_ == KEYBOARD_MODE_LOWERCASE)          ? row3_lower
            : (mode_ == KEYBOARD_MODE_NUMERICAL)        ? row3_numeric
            : (mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) ? row3_accent_lower
            : (mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) ? row3_accent_upper
                                                        : row3_upper;

        int y = 0;
        for(auto& row: {row0, row1, row2, row3}) {
            int x = 0;
            for(int i = 0; i < 11; ++i) {
                auto ch = row[i];

                Px ch_width = font_->character_width(ch);
                Px ch_height = font_->character_height(ch);
                auto min_max = font_->char_texcoords(ch);
                auto page = font_->character_page(ch);

                std::string sm_name = _F("text-{0}").format(page);

                auto info = find_key(x, y);
                if(info) {
                    WidgetBounds bounds;

                    bounds.min.x = info->center.x - (ch_width / 2);
                    bounds.max.x = info->center.x + (ch_width / 2);
                    bounds.min.y = info->center.y - (ch_height / 2);
                    bounds.max.y = info->center.y + (ch_height / 2);

                    const smlt::Vec2 uvs[] = {
                        smlt::Vec2(min_max.first.x, min_max.first.y),
                        smlt::Vec2(min_max.second.x, min_max.first.y),
                        smlt::Vec2(min_max.first.x, min_max.second.y),
                        smlt::Vec2(min_max.second.x, min_max.second.y)};

                    new_rectangle(sm_name, bounds, c, 0, uvs);

                    info->displayed_character = ch;
                }
                ++x;
            }

            ++y;
        }
    }

    Color calc_foreground_color() const {
        auto color = style_->foreground_color_;
        color.set_alpha(color.af() * style_->opacity_);
        return color;
    }

    void render_foreground(const WidgetBounds& bounds) override {
        _S_UNUSED(bounds);

        auto color = calc_foreground_color();

        WidgetBounds total_bounds;
        total_bounds.min.y = total_bounds.min.x = Px(10000);
        total_bounds.max.y = total_bounds.max.x = Px(-10000);

        WidgetBounds key_bounds;

        int focused_x = -1, focused_y = -1;

        if(focused_key_) {
            focused_x = focused_key_->x;
            focused_y = focused_key_->y;
        }

        keys_.clear();
        focused_key_ = nullptr;

        /* We build the key array here, this doesn't tell us what key
         * is which, but sets the positions of the keys */

        for(int y = 0; y < rows(); ++y) {
            for(int x = 0; x < columns(); ++x) {
                uint16_t displayed_char = 0;

                if(x < columns() - 1) {
                    key_bounds.min.x = (key_width() * x);
                    key_bounds.min.y = (key_height() * y);

                    key_bounds.min.x += key_padding() * (x);
                    key_bounds.min.y += key_padding() * (y);

                    key_bounds.min.x -= (bounds.width() / 2);
                    key_bounds.min.y -= (bounds.height() / 2);

                    if(y == 0 && x == 3) {
                        /* Space bar */
                        key_bounds.max.x =
                            key_bounds.min.x +
                            ((key_width() + key_padding()) * (columns() - 4)) -
                            key_padding();
                        key_bounds.max.y = key_bounds.min.y + key_height();
                        displayed_char = ' ';
                    } else if((y == 0 && x < 3) || y > 0) {
                        /* All other keys */
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y + key_height();
                    } else {
                        continue;
                    }
                } else {
                    /* Right-hand action buttons! */
                    key_bounds.min.x = (key_width() * x);
                    key_bounds.min.y = (key_height() * y);

                    key_bounds.min.x += key_padding() * (x);
                    key_bounds.min.y += key_padding() * (y);

                    key_bounds.min.x -= (bounds.width() / 2);
                    key_bounds.min.y -= (bounds.height() / 2);

                    if(y == 4) {
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y + key_height();
                    } else if(y == 0) {
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y +
                                           (key_height() * 2) + key_padding();
                    } else if(y == 2) {
                        key_bounds.max.x = key_bounds.min.x + key_width();
                        key_bounds.max.y = key_bounds.min.y +
                                           (key_height() * 2) + key_padding();
                    } else {
                        continue;
                    }
                }

                KeyInfo new_key;
                new_key.x = x;
                new_key.y = rows() - y - 1;
                new_key.bounds = key_bounds;
                new_key.center = key_bounds.min;
                new_key.center.x += (key_bounds.width() / 2);
                new_key.center.y += (key_bounds.height() / 2);
                new_key.first_vertex_index = mesh_->vertex_data->count();
                new_key.displayed_character = displayed_char;

                keys_.push_back(new_key);

                total_bounds.min.x =
                    std::min(new_key.bounds.min.x, total_bounds.min.x);
                total_bounds.min.y =
                    std::min(new_key.bounds.min.y, total_bounds.min.y);
                total_bounds.max.x =
                    std::max(new_key.bounds.max.x, total_bounds.max.x);
                total_bounds.max.y =
                    std::max(new_key.bounds.max.y, total_bounds.max.y);

                new_rectangle("foreground", key_bounds, color, 0);
            }
        }

        if(focused_x > -1 && focused_y > -1) {
            focus_key(focused_x, focused_y);
        }
    }

    /* The content dimensions are nothing to do with the text. We don't do
     * anything with text set on a keyboard widget. Instead the dimensions are
     * defined by the number of keys and the font size etc. */
    UIDim calculate_content_dimensions(Px text_width, Px text_height) override {
        _S_UNUSED(text_width);
        _S_UNUSED(text_height);

        Px height = ((key_height() + key_padding()) * rows());
        Px width = ((key_width() + key_padding()) * columns());
        width -= key_padding();
        height -= key_padding();

        return UIDim(width, height);
    }

    KeyboardMode mode_ = KEYBOARD_MODE_LOWERCASE;
    void set_mode(KeyboardMode mode) {
        if(mode_ == mode) {
            return;
        }

        mode_ = mode;
        rebuild();
    }
};

Keyboard::Keyboard(Scene* owner) :
    Widget(owner, STAGE_NODE_TYPE_WIDGET_KEYBOARD) {}

bool Keyboard::on_create(Params params) {
    if(!clean_params<Keyboard>(params)) {
        return false;
    }

    if(!Widget::on_create(params)) {
        return false;
    }

    auto sstyle = params.get<WidgetStylePtr>("shared_style");
    auto config = params.get<UIConfig>("theme").value_or(UIConfig());
    if(!sstyle) {
        set_background_color(smlt::Color::none());
        set_foreground_color(smlt::Color::none());
        set_border_color(smlt::Color::none());
        set_text_color(smlt::Color::none());
    }

    resize(-1, -1);

    main_frame_ = scene->create_node<Frame>("");
    main_frame_->set_parent(this);
    main_frame_->set_space_between(0);
    main_frame_->set_border_width(0);
    main_frame_->set_background_color(config.background_color_);
    main_frame_->set_border_color(config.background_color_);
    main_frame_->set_foreground_color(smlt::Color::none());

    /* FIXME: Registration here is ugly. KeyboardPanel should either be a
     * publically accessible node, or, not be a node */
    scene->register_stage_node<KeyboardPanel>();

    panel_ = scene->create_node<KeyboardPanel>(Params().set("theme", config));

    panel_->set_background_color(config.background_color_);
    panel_->set_border_color(config.background_color_);
    panel_->set_border_width(2);
    panel_->rebuild();

    auto initial_text = params.get<std::string>("initial_text").value_or("");

    entry_ = scene->create_node<TextEntry>(initial_text);
    entry_->set_border_width(2);
    entry_->resize(panel_->content_width(), panel_->key_height());
    entry_->set_background_color(smlt::Color::white());
    entry_->set_border_color(config.background_color_);
    entry_->set_text_color(config.foreground_color_);
    entry_->set_text_alignment(TEXT_ALIGNMENT_LEFT);
    entry_->set_padding(Px(4));

    info_row_ = scene->create_node<Frame>();
    info_row_->set_border_color(config.foreground_color_);
    info_row_->set_border_width(2);
    info_row_->set_background_color(style_->foreground_color_);
    info_row_->set_foreground_color(style_->foreground_color_);
    info_row_->set_layout_direction(LAYOUT_DIRECTION_LEFT_TO_RIGHT);

    auto x_button = scene->create_node<Label>(Params().set("text", ""));
    x_button->set_text("X");
    x_button->set_text_color(smlt::Color::white());
    x_button->resize(panel_->key_height(), panel_->key_height());
    x_button->rebuild();

    auto x_label = scene->create_node<Label>(Params().set("text", ""));
    x_label->set_background_color(smlt::Color::red());
    x_label->set_text(_T("Cancel"));
    x_label->set_text_color(smlt::Color::white());
    x_label->resize(-1, panel_->key_height());
    x_label->rebuild();

    info_row_->pack_child(x_button);
    info_row_->pack_child(x_label);
    info_row_->resize(panel_->content_width(), -1);
    info_row_->rebuild();

    main_frame_->pack_child(entry_);
    main_frame_->pack_child(panel_);
    main_frame_->pack_child(info_row_);
    main_frame_->rebuild();

    auto mode = params.get<int>("mode").value_or((int)KEYBOARD_MODE_UPPERCASE);
    set_mode((KeyboardMode)mode);

    return true;
}

Keyboard::~Keyboard() {
    main_frame_->unpack_child(entry_, CHILD_CLEANUP_RETAIN);
    main_frame_->unpack_child(panel_, CHILD_CLEANUP_RETAIN);
    main_frame_->unpack_child(info_row_, CHILD_CLEANUP_RETAIN);
    panel_ = nullptr;
    entry_ = nullptr;
    info_row_ = nullptr;
}

void Keyboard::cancel() {
    entry_->set_text("");
    panel_->focus_key(0, 0);
    signal_cancelled_();
}

void Keyboard::activate() {
    auto focused = panel_->focused_key_;
    if(!focused) {
        return;
    }

    auto txt = entry_->text();
    if(focused->displayed_character) {
        SoftKeyPressedEvent evt;
        evt.chr = focused->displayed_character;
        evt.code = (smlt::KeyboardCode)0; // FIXME!
        signal_key_pressed_(evt);
        if(!evt.cancelled) {
            entry_->insert_character(evt.chr);
        }
    } else if(focused->is_backspace_key()) {
        entry_->backspace_character();
    } else if(focused->is_accent_key()) {
        if(panel_->mode_ == KEYBOARD_MODE_LOWERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_LOWERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_UPPERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_UPPERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_NUMERICAL) {
            set_mode(KEYBOARD_MODE_ACCENT_LOWERCASE);
        } else {
            /* We were already in an accent screen, so turn it off */
            set_mode(KEYBOARD_MODE_LOWERCASE);
        }
    } else if(focused->is_case_toggle_key()) {
        if(panel_->mode_ == KEYBOARD_MODE_ACCENT_LOWERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_UPPERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_ACCENT_UPPERCASE) {
            set_mode(KEYBOARD_MODE_ACCENT_LOWERCASE);
        } else if(panel_->mode_ == KEYBOARD_MODE_LOWERCASE) {
            set_mode(KEYBOARD_MODE_UPPERCASE);
        } else {
            set_mode(KEYBOARD_MODE_LOWERCASE);
        }
    } else if(focused->is_ok_key()) {
        signal_done_(entry_->text());
        entry_->set_text("");
    } else if(focused->is_numerical_key()) {
        set_mode(KEYBOARD_MODE_NUMERICAL);
    }
}

void Keyboard::set_mode(KeyboardMode mode) {
    panel_->set_mode(mode);
}

KeyboardMode Keyboard::mode() const {
    return panel_->mode_;
}

void Keyboard::set_keyboard_integration_enabled(bool value) {
    if(value && !keyboard_listener_) {
        keyboard_listener_ = std::make_shared<KeyboardListener>(this);
    } else if(!value) {
        keyboard_listener_.reset();
    }
}

void Keyboard::set_font(FontPtr font) {
    Widget::set_font(font);

    /*panel_->set_font(font);
    panel_->rebuild();
    entry_->set_font(font);
    entry_->rebuild();

    info_row_->set_font(font);
    info_row_->rebuild();

    main_frame_->set_font(font);
    main_frame_->rebuild(); */
}

void Keyboard::on_transformation_change_attempted() {
    auto ap = anchor_point();
    main_frame_->set_anchor_point(ap.x, ap.y);
    main_frame_->rebuild();
    Widget::on_transformation_change_attempted();
}

UIDim Keyboard::calculate_content_dimensions(Px text_width, Px text_height) {
    _S_UNUSED(text_width);
    _S_UNUSED(text_height);

    UIDim ret;
    if(main_frame_) {
        ret.width = main_frame_->content_width();
        ret.height = main_frame_->content_height();
    }

    return ret;
}

bool Keyboard::pre_set_text(const unicode& text) {
    /* We set the text on the entry and don't set the text on the keyboard */
    entry_->set_text(text);
    return false;
}

const unicode& Keyboard::calc_text() const {
    static unicode blank = "";
    return (entry_) ? entry_->text() : blank;
}

void Keyboard::cursor_to_space() {
    assert(panel_);

    for(auto& k: panel_->keys_) {
        if(k.is_space_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_ok() {
    for(auto& k: panel_->keys_) {
        if(k.is_ok_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_backspace() {
    for(auto& k: panel_->keys_) {
        if(k.is_backspace_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_return() {
    for(auto& k: panel_->keys_) {
        if(k.is_return_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

void Keyboard::cursor_to_case_toggle() {
    for(auto& k: panel_->keys_) {
        if(k.is_case_toggle_key()) {
            panel_->focus_key(k.x, k.y);
            return;
        }
    }
}

bool Keyboard::cursor_to_char(uint16_t displayed_char) {
    for(auto& k: panel_->keys_) {
        if(k.displayed_character == displayed_char) {
            panel_->focus_key(k.x, k.y);
            return true;
        }
    }

    return false;
}

void Keyboard::cursor_up() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x, focused->y - 1);

        if(focused->is_return_key()) {
            new_key = panel_->find_key(11, 0); // Backspace
        } else if(focused->is_ok_key()) {
            new_key = panel_->find_key(11, 2); // Return key
        }

        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

void Keyboard::cursor_down() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x, focused->y + 1);

        if(focused->is_backspace_key()) {
            new_key = panel_->find_key(11, 2); // Return key
        } else if(focused->is_return_key()) {
            new_key = panel_->find_key(11, 4); // OK key
        }

        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

void Keyboard::cursor_right() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x + 1, focused->y);
        if(focused->is_space_key()) {
            new_key = panel_->find_key(11, 4); // OK key
        }

        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

void Keyboard::cursor_left() {
    auto focused = panel_->focused_key_;
    if(focused) {
        auto new_key = panel_->find_key(focused->x - 1, focused->y);
        if(new_key) {
            panel_->focus_key(new_key->x, new_key->y);
        }
    }
}

} // namespace ui
} // namespace smlt
